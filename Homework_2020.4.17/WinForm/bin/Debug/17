<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="Hystrix 是什么？ Hystrix 是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等， Hystrix 能够保证在一个依赖出问题的情况" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>SpringCloud-Hystrix 服务降级、熔断 - 农夫三拳有点疼~ - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/songjilong/custom.css?v=LWHNXx3v&#x2B;1GWMnBDvQXBcp1ykyo=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/songjilong/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/songjilong/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/songjilong/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 561152;
        var currentBlogApp = 'songjilong';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleMemory';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/songjilong/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/songjilong/">农夫三拳有点疼</a>
</h1>
<h2>
种一棵树最好的时间是十年前，其次是现在
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/songjilong/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%86%9C%E5%A4%AB%E4%B8%89%E6%8B%B3%E6%9C%89%E7%82%B9%E7%96%BC~">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/songjilong/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
67&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
38</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/songjilong/p/12770999.html">SpringCloud-Hystrix 服务降级、熔断</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <h1 id="hystrix-是什么？">Hystrix 是什么？</h1>
<p>Hystrix 是一个用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时、异常等，<strong>Hystrix 能够保证在一个依赖出问题的情况下，不会导致整体服务失败，避免级联故障，以提高分布式系统的弹性。</strong></p>
<p>「断路器」本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控(类似熔断保险丝)，<strong>向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方无法处理的异常</strong>，这样就保证了服务调用方的线程不会被长时间、不必要地占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p>
<h1 id="hystrix-的几个概念">Hystrix 的几个概念</h1>
<h2 id="服务降级">服务降级</h2>
<p>不让客户端等待，并立即返回一个友好的提示（服务器忙，请稍后再试）</p>
<p><strong>🎃 哪些情况会发生服务降级：</strong></p>
<ul>
<li>程序运行异常</li>
<li>超时</li>
<li>服务熔断引起服务降级</li>
<li>线程池/信号量打满也会导致服务降级</li>
</ul>
<h2 id="服务熔断">服务熔断</h2>
<p>类似保险丝，电流过大时，直接熔断断电。</p>
<p>熔断机制是应对雪崩效应的一种微服务链路保护机制，当扇出链路的某个微服务出错不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息，<strong>当检测到该节点微服务调用响应正常后，恢复调用链路。</strong></p>
<p>服务降级 → 服务熔断 → 恢复调用链路</p>
<h2 id="服务限流">服务限流</h2>
<p>对于高并发的操作，限制单次访问数量</p>
<h1 id="服务降级的用法与分析">服务降级的用法与分析</h1>
<p>超时导致服务器变慢：超时不再等待； 出错（宕机或程序运行出错）：要有备选方案</p>
<ul>
<li>服务提供者超时了，调用者不能一直卡死等待，必须要服务降级</li>
<li>服务提供者宕机了，调用者不能一直卡死等待，必须要服务降级</li>
<li>服务提供者没问题，调用者自己出现故障或者有自我要求（自己的等待时间必须小于服务提供者）</li>
</ul>
<h2 id="给服务提供方设置服务降级">给服务提供方设置服务降级</h2>
<p>1、在需要服务降级的方法上标注注解，fallbackMethod 代表回退方法，需要自己定义，<code>@HystrixProperty</code> 中设置的是该方法的超时时间，如果超过该事件则自动降级</p>
<p>当运行超时或服务内部出错都会调用回退方法</p>
<pre><code class="language-java">@HystrixCommand(
    fallbackMethod = &quot;timeoutHandler&quot;, 
    commandProperties = {
    @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;3000&quot;)
})
public String timeout(Long id) {
    int time = 3000;
    try {
        TimeUnit.MILLISECONDS.sleep(time);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    //模拟异常
    //int i = 10 / 0;
    return &quot;线程：&quot; + Thread.currentThread().getName();
}
</code></pre>
<p>2、在启动类上添加注解，开启降级</p>
<pre><code class="language-java">@EnableCircuitBreaker
</code></pre>
<h2 id="给服务消费方设置服务降级">给服务消费方设置服务降级</h2>
<p>1、添加配置</p>
<pre><code class="language-yml"># 在feign中开启hystrix
feign:
  hystrix:
    enabled: true
</code></pre>
<p>2、和服务提供方一样，照葫芦画瓢</p>
<pre><code class="language-java">@HystrixCommand(
    fallbackMethod = &quot;timeoutHandler&quot;, 
    commandProperties = {
    @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;1500&quot;)
})
public String timeout(@PathVariable(&quot;id&quot;) Long id) {
    int i = 1/0;
    return hystrixService.timeout(id);
}
</code></pre>
<p>3、在启动类上添加注解</p>
<pre><code class="language-java">@EnableHystrix
</code></pre>
<h2 id="问题">问题</h2>
<p>以上配置方式存在的问题：</p>
<ul>
<li>每个业务方法对应一个回退方法，代码膨胀</li>
<li>每个业务方法上都配置相同的处理，代码冗余</li>
</ul>
<p><strong>🎉 解决方式1：</strong>在类上配置一个全局回退方法，相当于是一个通用处理，当此回退方法能满足你的需求，就无需在方法上指定其它回退方法，如果需要使用特定的处理方法可以再在业务方法上定义</p>
<pre><code class="language-java">@DefaultProperties(defaultFallback = &quot;globalFallbackMethod&quot;)
</code></pre>
<p><strong>🎉 解决方式2：</strong>但此时处理代码和依然和业务代码混合在一起，我们还可以使用另一种方式：编写一个类实现 Feign 的调用接口，并重写其方法作为回退方法，然后在 <code>@FeignClient</code> 注解上添加 <code>fallback</code> 属性，值为前面的类。</p>
<h1 id="服务熔断的用法与分析">服务熔断的用法与分析</h1>
<p>在SpringCloud中，熔断机制通过 Hystrix 实现。Hystrix 监控微服务间的调用状况，当失败的调用到一定阈值，默认 5  秒内 20 次调用失败就会启动熔断机制。熔断机制的注解是 @HystrixCommand</p>
<pre><code class="language-java">@HystrixCommand(
    fallbackMethod = &quot;paymentCircuitBreakerFallback&quot;, 
    commandProperties = {
        @HystrixProperty(name = &quot;circuitBreaker.enabled&quot;, value = &quot;true&quot;), //是否开启断路器
        @HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;, value = &quot;10&quot;), //请求次数
        @HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;10000&quot;), //时间窗口期
        @HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;60&quot;) //失败率达到多少后跳闸
})
public String circuitBreaker(Long id) {
    if (id &lt; 0) {
        throw new RuntimeException(&quot;id 不能为负数&quot;);
    }
    return Thread.currentThread().getName() + &quot;\t&quot; + &quot;调用成功，流水号：&quot; + IdUtil.simpleUUID();
}

public String circuitBreakerFallback(Long id) {
    return &quot;id 不能为负数，你的id = &quot; + id;
}
</code></pre>
<p><code>@HystrixProperty</code> 中的配置可以参考 <code>com.netflix.hystrix.HystrixCommandProperties</code> 类</p>
<p><strong>详见官方文档：<a href="https://github.com/Netflix/Hystrix/wiki/Configuration">https://github.com/Netflix/Hystrix/wiki/Configuration</a></strong></p>
<p><strong>也有雷锋同志做了翻译：<a href="https://www.jianshu.com/p/39763a0bd9b8">https://www.jianshu.com/p/39763a0bd9b8</a></strong></p>
<p><strong>🎨 熔断类型</strong></p>
<ul>
<li>熔断打开：请求不再调用当前服务，内部设置时钟一般为MTTR（平均故障处理时间），当打开时长达到所设时钟则进入半熔断状态。</li>
<li>熔断半开：部分请求根据规则调用服务，如果请求成功且符合规则，则关闭熔断。</li>
<li>熔断关闭：不会对服务进行熔断。</li>
</ul>
<p><strong>🎨 断路器什么时候起作用？</strong></p>
<p>根据上面配置的参数，有三个重要的影响断路器的参数</p>
<ul>
<li>快照时间窗：回路被打开、拒绝请求到再尝试请求并决定回路是否继续打开的时间范围，默认是 5 秒</li>
<li>请求总数阈值：在一个滚动窗口中，打开断路器需要的最少请求数，默认是 20 次（就算前 19 次都失败了，断路器也不会被打开）</li>
<li>错误百分比阈值：错误请求数在总请求数所占的比例，达到设定值才会触发，默认是 50%</li>
</ul>
<p><strong>🎨 断路器开启或关闭的条件</strong></p>
<ol>
<li>当请求达到一定阈值时（默认 20 次）</li>
<li>当错误率达到一定阈值时（默认 50%）</li>
<li>达到以上条件断路器开启</li>
<li>当开启的时候，所有请求都不会转发</li>
<li>当断路器开启一段时间后（默认 5 秒）进入半开状态，并让其中一个请求进行转发，如果成功断路器关闭，如果失败继续开启，重复第 4 和 5 步</li>
</ol>
<p><strong>🎨 断路器开启之后会发生什么？</strong></p>
<ul>
<li>再有请求调用时，不再调用主逻辑，而是调用降级 fallback。</li>
<li>断路器开启之后，Hytrix 会启动一个休眠时间窗，在此时间内，fallback 会临时称为主逻辑，当休眠期到了之后，断路器进入半开状态，释放一个请求到原来的主逻辑上，如果请求成功返回，则断路器关闭，如果请求失败，则继续进入打开状态，休眠时间窗重新计时。</li>
</ul>
<h1 id="hystrix服务熔断的工作流程">Hystrix服务熔断的工作流程</h1>
<p><img src="https://gitee.com/songjilong/FigureBed/raw/master/img/20200424225855.png" alt="Hystrix服务熔断的工作流程"></p>
<p>详见官方文档：<a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></p>
<h1 id="hystrix-dashboard-上手">Hystrix DashBoard 上手</h1>
<h2 id="搭建">搭建</h2>
<p>1、新建一个项目，导入 maven 依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-netflix-hystrix-dashboard&lt;/artifactId&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>2、添加配置</p>
<pre><code class="language-yml">server:
  port: 9001
</code></pre>
<p>3、开启 Hystrix DashBoard</p>
<pre><code class="language-java">@SpringBootApplication
@EnableHystrixDashboard
public class ConsumerHystrixDashBoard9001 {
    public static void main(String[] args){
        SpringApplication.run(ConsumerHystrixDashBoard9001.class, args);
    }
}
</code></pre>
<p>4、浏览器输入 <code>http://localhost:9001/hystrix</code>，出现以下界面即启动成功</p>
<p><img src="https://gitee.com/songjilong/FigureBed/raw/master/img/20200424231413.png" alt=""></p>
<h1 id="使用">使用</h1>
<p>注意：想要被 Hystrix DashBoard 监控的服务必须导入此依赖</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<p>在被监控服务的主启动类里添加如下代码，否则某些旧版本可能报错 <code>Unable to connect to Command Metric Stream.</code></p>
<pre><code class="language-java">/**
 * 此配置是为了服务监控而配置，与服务容错本身无关,SpringCloud升级后的坑
 * ServletRegistrationBean因为springboot的默认路径不是&quot;/hystrix.stream&quot;，
 * 只要在自己的项目里配置上下面的servlet就可以了
 */
@Bean
public ServletRegistrationBean getServlet(){
    HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet();
    ServletRegistrationBean registrationBean = new ServletRegistrationBean(streamServlet);
    registrationBean.setLoadOnStartup(1);
    registrationBean.addUrlMappings(&quot;/hystrix.stream&quot;);
    registrationBean.setName(&quot;HystrixMetricsStreamServlet&quot;);
    return registrationBean;
}
</code></pre>
<p>在 Hystrix DashBoard 页面输入基本信息，进入仪表盘界面</p>
<p><img src="https://gitee.com/songjilong/FigureBed/raw/master/img/20200424234247.png" alt=""></p>
<p>大致情况如下所示</p>
<p><img src="https://gitee.com/songjilong/FigureBed/raw/master/img/20200424234642.png" alt=""></p>
<p>操作界面分析：</p>
<p><img src="https://gitee.com/songjilong/FigureBed/raw/master/img/20200424233620.png" alt=""></p>
<hr>
<p>代码地址：<a href="https://github.com/songjilong/springcloud-hoxton-learning">https://github.com/songjilong/springcloud-hoxton-learning</a></p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-24 23:50</span>&nbsp;
<a href="https://www.cnblogs.com/songjilong/">农夫三拳有点疼~</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12770999" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12770999);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 561152, cb_blogApp = 'songjilong', cb_blogUserGuid = '316a7fce-4c2f-498e-9b44-08d765b2412c';
    var cb_entryId = 12770999, cb_entryCreatedDate = '2020-04-24 23:50', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 农夫三拳有点疼~
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <!-- require APlayer -->
<!--
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css">
<script src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"></script>
<!-- require MetingJS -->
<script src="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js"></script>
<meting-js
        id="594243151"
        lrc-type="0"
        server="netease"
        order="random"
        type="playlist"
        fixed="true"
        list-olded="true">
</meting-js>
-->
    </div>
</body>
</html>