<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="前言 声明式事务是Spring功能中最爽之一，可是有些时候，我们在使用声明式事务并未生效，这是为什么呢？ 文章首发于微信公众号【码猿技术专栏】 今天陈某带大家来聊一聊声明事务的几种失效场景。本文将会从" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>面试官：你知道哪些事务失效的场景？ - 爱撒谎的男孩 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=hlpQ1CJDwwJXDxv2HNauUmW3NjyWzoMaw1uER19SLT0" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/Chenjiabing/custom.css?v=rUnaAkvpCz/CQmJwSXvbZRJJyn8=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=XjHfryC9ctsatIZz1dHn7TsRIqmwz9c3aj_6SCfHSDM" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/Chenjiabing/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/Chenjiabing/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/Chenjiabing/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=VSP5rTXbJNpNidklGdgoLgwCGyUPITrcsmlgoaMKz3w"></script>
    <script>
        var currentBlogId = 357835;
        var currentBlogApp = 'Chenjiabing';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'CodingLife';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/Chenjiabing/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/Chenjiabing/">不才陈某</a>
</h1>
<h2>
微信公众号搜索码猿技术专栏
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/Chenjiabing/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E7%88%B1%E6%92%92%E8%B0%8E%E7%9A%84%E7%94%B7%E5%AD%A9">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/Chenjiabing/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
58&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
11</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/Chenjiabing/p/12730907.html">面试官：你知道哪些事务失效的场景？</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <h1 data-tool="mdnice编辑器"><span class="prefix"><span class="content">前言</span></span></h1>
<ul data-tool="mdnice编辑器">
<li>声明式事务是Spring功能中最爽之一，可是有些时候，我们在使用声明式事务并未生效，这是为什么呢？</li>
<li><strong>文章首发于微信公众号【码猿技术专栏】</strong></li>
<li>今天陈某带大家来聊一聊声明事务的几种失效场景。本文将会从以下两个方面来说一下事务为什么会失效？<ol>
<li>@Transactional介绍</li>
<li>@Transactional失效场景</li>
</ol></li>
</ul>
<h1 data-tool="mdnice编辑器"><span class="prefix"><span class="content">@Transactional介绍</span></span></h1>
<ul data-tool="mdnice编辑器">
<li><code>@Transactional</code>是声明式事务的注解，可以被标记在<code>类上</code>、<code>接口</code>、<code>方法</code>上。</li>
<li>该注解中有很多值得深入了解的几种属性，我们来看一下。</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">transactionManager</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>指定事务管理器，值为<code>bean</code>的名称，这个主要用于多事务管理器情况下指定。比如多数据源配置的情况下。</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">isolation</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>事务的隔离级别，默认是<code>Isolation.DEFAULT</code>。</li>
<li>几种值的含义如下：
<ul>
<li><code>Isolation.DEFAULT</code>：事务默认的隔离级别，使用数据库默认的隔离级别。</li>
<li><code>Isolation.READ_UNCOMMITTED</code>：这是事务最低的隔离级别，它充许别外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻读。</li>
<li><code>Isolation.READ_COMMITTED</code>：保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻读。</li>
<li><code>Isolation.REPEATABLE_READ</code>：这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻读。</li>
<li><code>Isolation.SERIALIZABLE</code>：这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻读。</li>
</ul>
</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">propagation</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>代表事务的传播行为，默认值为<code>Propagation.REQUIRED</code>。</li>
<li><code>Propagation.REQUIRED</code>：如果存在一个事务，则支持当前事务。如果没有事务则开启一个新的事务。比如A方法内部调用了B方法，此时B方法将会使用A方法的事务。</li>
<li><code>Propagation.MANDATORY</code>：支持当前事务，如果当前没有事务，就抛出异常。</li>
<li><code>Propagation.NEVER</code>：以非事务方式执行，如果当前存在事务，则抛出异常。</li>
<li><code>Propagation.NOT_SUPPORTED</code>：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li>
<li><code>Propagation.REQUIRES_NEW</code>：新建事务，如果当前存在事务，把当前事务挂起。比如A方法使用默认的事务传播属性，B方法使用<code>REQUIRES_NEW</code>，此时A方法在内部调用B方法，一旦A方法出现异常，A方法中的事务回滚了，但是B方法并没有回滚，因为A和B方法使用的不是同一个事务，B方法新建了一个事务。</li>
<li><code>Propagation.NESTED</code>：支持当前事务，新增<code>Savepoint</code>点，也就是在进入子事务之前，父事务建立一个回滚点，与当前事务同步提交或回滚。 子事务是父事务的一部分，在父事务还未提交时，子事务一定没有提交。嵌套事务一个非常重要的概念就是内层事务依赖于外层事务。外层事务失败时，会回滚内层事务所做的动作。而内层事务操作失败并不会引起外层事务的回滚。</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">timeout</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>事务的超时时间，单位为秒。</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">readOnly</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false。如果一个事务只涉及到只读，可以设置为true。</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">rollbackFor 属性</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>用于指定能够触发事务回滚的异常类型，可以指定多个异常类型。</li>
<li>默认是在<code>RuntimeException</code>和<code>Error</code>上回滚。</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">noRollbackFor</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>抛出指定的异常类型，不回滚事务，也可以指定多个异常类型。</li>
</ul>
<h1 data-tool="mdnice编辑器"><span class="prefix"><span class="content">@Transactional失效场景</span></span></h1>
<ul data-tool="mdnice编辑器">
<li>声明式事务失效的场景有很多，陈某这里只是罗列一下几种常见的场景。</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">底层数据库引擎不支持事务</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>如果数据库引擎不支持事务，则Spring自然无法支持事务。</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">在非public修饰的方法使用</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>@Transactional注解使用的是AOP，在使用动态代理的时候只能针对<code>public</code>方法进行代理，源码依据在<code>AbstractFallbackTransactionAttributeSource</code>类中的<code>computeTransactionAttribute</code>方法中，如下：</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">protected</span><span style="color: #000000;"> TransactionAttribute computeTransactionAttribute(Method method,
    Class</span>&lt;?&gt;<span style="color: #000000;"> targetClass) {
        </span><span style="color: #008000;">//</span><span style="color: #008000;"> Don't allow no-public methods as required.</span>
        <span style="color: #0000ff;">if</span> (allowPublicMethodsOnly() &amp;&amp; !<span style="color: #000000;">Modifier.isPublic(method.getModifiers())) {
        </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">null</span><span style="color: #000000;">;
}</span></pre>
</div>
<ul data-tool="mdnice编辑器">
<li>此处如果不是标注在<code>public</code>修饰的方法上并不会抛出异常，但是会导致事务失效。</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">异常被 " 踹死了 "</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>这种情况小白是最容易犯错的，在整个事务的方法中使用<code>try-catch</code>，导致异常无法抛出，自然会导致事务失效。伪代码如下：</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: #000000;">@Transactional
</span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> method(){
  </span><span style="color: #0000ff;">try</span><span style="color: #000000;">{
    </span><span style="color: #008000;">//</span><span style="color: #008000;">插入一条数据
    </span><span style="color: #008000;">//</span><span style="color: #008000;">更改一条数据</span>
  }<span style="color: #0000ff;">catch</span><span style="color: #000000;">(Exception ex){
    </span><span style="color: #0000ff;">return</span><span style="color: #000000;">;
  }
}</span></pre>
</div>
<pre class="custom" data-tool="mdnice编辑器"><code class="hljs"><span class="hljs-meta"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-params"><span class="hljs-keyword"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-keyword"><span class="hljs-keyword">&nbsp;</span></span></span></span></span></span></span></span></span></span></span></code></pre>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">方法中调用同类的方法</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>简单的说就是一个类中的<code>A方法</code>（未标注声明式事务）在内部调用了<code>B方法</code>(标注了声明式事务)，这样会导致B方法中的事务失效。</li>
<li>代码如下：</li>
</ul>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> Test{
  </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> A(){
    </span><span style="color: #008000;">//</span><span style="color: #008000;">插入一条数据
    </span><span style="color: #008000;">//</span><span style="color: #008000;">调用B方法</span>
<span style="color: #000000;">    B();
  }
  
  @Transactional
  </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> B(){
    </span><span style="color: #008000;">//</span><span style="color: #008000;">插入数据</span>
<span style="color: #000000;">  }
}</span></pre>
</div>
<pre class="custom" data-tool="mdnice编辑器"><code class="hljs"><span class="hljs-keyword"><span class="hljs-class"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-params"><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-meta"><span class="hljs-function"><span class="hljs-keyword"><span class="hljs-keyword"><span class="hljs-title"><span class="hljs-params"><span class="hljs-comment">&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></code></pre>
<ul data-tool="mdnice编辑器">
<li><strong>为什么会失效呢？</strong>：其实原因很简单，Spring在扫描Bean的时候会自动为标注了<code>@Transactional</code>注解的类生成一个代理类（proxy）,当有注解的方法被调用的时候，实际上是代理类调用的，代理类在调用之前会开启事务，执行事务的操作，但是同类中的方法互相调用，相当于<code>this.B()</code>，此时的B方法并非是代理类调用，而是直接通过原有的Bean直接调用，所以注解会失效。</li>
<li><strong>如何解决呢？</strong>：这就涉及到注解失效的原因了，后续文章会介绍到，这里不过多介绍了。</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">rollbackFor属性设置错误</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>很容易理解，指定异常触发回滚，一旦设置错误，导致一些异常不能触发回滚，此时的声明式事务不就失效了吗。</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">noRollbackFor属性设置错误</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>这个和rollbackFor属性设置错误类似，一旦设置错误，也会导致异常不能触发回滚，此时的声明式事务会失效。</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">propagation属性设置错误</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>事务的传播属性在上面已经介绍了，默认的事务传播属性是<code>Propagation.REQUIRED</code>，但是一旦配置了错误的传播属性，也是会导致事务失效，如下三种配置将会导致事务失效：
<ul>
<li>Propagation.SUPPORTS</li>
<li>Propagation.NOT_SUPPORTED</li>
<li>Propagation.NEVER</li>
</ul>
</li>
</ul>
<h3 data-tool="mdnice编辑器"><span class="prefix"><span class="content">原始SSM项目，重复扫描导致事务失效</span></span></h3>
<ul data-tool="mdnice编辑器">
<li>在原始的SSM项目中都配置了<code>context:component-scan</code>并且同时扫描了service层，此时事务将会失效。</li>
<li>按照Spring配置文件的加载顺序来说，会先加载Springmvc的配置文件，如果在加载Springmvc配置文件的时候把service也加载了，但是此时事务还没加载，将会导致事务无法成功生效。</li>
<li>解决方法很简单，把扫描service层的配置设置在Spring配置文件或者其他配置文件中即可。</li>
</ul>
<h2 data-tool="mdnice编辑器"><span class="prefix"><span class="content">总结</span></span></h2>
<ul data-tool="mdnice编辑器">
<li>事务失效的原因很多，但是千万不要做到一知半解，只有深入理解了，才能在面试过程中对答如流。</li>
<li><strong>今天的文章就到此结束了，如果觉得陈某写得不错，有所收获的，关注在看来一波，你们的鼓励，将会是我写作的动力，谢谢支持！！！</strong></li>
</ul>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-19 12:03</span>&nbsp;
<a href="https://www.cnblogs.com/Chenjiabing/">爱撒谎的男孩</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12730907" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12730907);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 357835, cb_blogApp = 'Chenjiabing', cb_blogUserGuid = 'af3fe64b-dc02-e711-845c-ac853d9f53ac';
    var cb_entryId = 12730907, cb_entryCreatedDate = '2020-04-19 12:03', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 爱撒谎的男孩
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>