<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="C&#x2B;&#x2B;为随机数提供了两套工具：C风格的和C&#x2B;&#x2B;风格的。 C风格 C为随机数提供的工具是 、`srand RAND_MAX 中。 为`rand srand(1) rand 0`到 ，`RAND_MAX " />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>C++生成随机数 - jerry_fuyi - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/mttrendy/bundle-mttrendy.min.css?v=Nm_ujJtGKDq5SpJ2XERB3wgoRnlvEg7NAIZvC-SzytE" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/jerry-fuyi/custom.css?v=QxGDGimsRKr9CZUobyVFO1mi8HA=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/mttrendy/bundle-mttrendy-mobile.min.css?v=ADiCwO2hOTdd5yYidcx7eob7ix2VJI4o_TXjEycTHjs" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/jerry-fuyi/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/jerry-fuyi/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/jerry-fuyi/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=VSP5rTXbJNpNidklGdgoLgwCGyUPITrcsmlgoaMKz3w"></script>
    <script>
        var currentBlogId = 525569;
        var currentBlogApp = 'jerry-fuyi';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var skinName = 'MTTrendy';
    </script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    
</head>
<body>
    <a name="top"></a>
    
    
<div id="top">

<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/jerry-fuyi/">jerry_fuyi</a>
</h1>
<p id="tagline">

</p>


</div>

<div id="rightmenu">

	
<h3>My Links</h3>
<ul>
			<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
			<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/jerry-fuyi/">
首页</a>
</li>
			<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/jerry_fuyi">
联系</a></li>
			<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/jerry-fuyi/rss/">
订阅</a> 
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/jerry-fuyi/rss/">
    <img src="/skins/mttrendy/images/xml.gif" alt="订阅" />
</a></li>
			<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


	<h3>Blog Stats</h3>
	<ul>
		<li>Posts - 
70</li>
		<li>Stories - 
0</li>
		<li>Comments - 
11</li>
		<li>Trackbacks - 
0
	</li>
</ul>


	
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

	<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>

</div>

<div id="main">
	<div id="post_detail">
	<div class="post">
		<h2>
			
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/jerry-fuyi/p/12728941.html">C++生成随机数</a>

		</h2>
		
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <p>C++为随机数提供了两套工具：C风格的和C++风格的。</p>
<h3 id="c风格">C风格</h3>
<p>C为随机数提供的工具是<code>rand</code>、<code>srand</code>和<code>RAND_MAX</code>，定义在<code>&lt;stdlib.h&gt;</code>中。</p>
<p><code>srand</code>为<code>rand</code>设置种子，如果不设置，相当于调用过<code>srand(1)</code>。<code>rand</code>产生伪随机数，其范围为<code>0</code>到<code>RAND_MAX</code>，<code>RAND_MAX</code>至少是<code>32767</code>，在MSVC和GCC中这个值都是<code>32767</code>。</p>
<p>伪随机数看似随机，实则是有规律可循的，对于相同的种子值，<code>rand</code>产生的序列完全相同，也就是说无论你给<code>srand</code>一个什么数字，多次运行程序的结果都将相同——除非你给<code>srand</code>的是不同的数字，比如时间。<code>&lt;time.h&gt;</code>中的<code>time</code>函数返回整数表示的系统时间，可用于设置种子。</p>
<p>如果我们只需要<code>0</code>到<code>9</code>的随机数，可以把<code>rand</code>的返回值<code>% 10</code>；如果是<code>42</code>到<code>233</code>，可以写<code>rand() % 192 + 42</code>。下面的<code>random</code>函数封装了这项工作。注意只有在<code>b - a + 1</code>远小于或整除<code>RAND_MAX</code>时随机数的分布才比较均匀。</p>
<pre><code>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

int random(int a, int b)
{
    return rand() % (b - a + 1) + a;
}

int main()
{
    srand(time(NULL));
    printf(&quot;RAND_MAX = %d\n&quot;, RAND_MAX);
    for (int i = 0; i &lt; 10; i++)
        printf(&quot;%d &quot;, rand());
    printf(&quot;\n&quot;);
    int count[10] = {0};
    for (int i = 0; i &lt; 10000; i++)
        count[random(0, 9)]++;
    for (int i = 0; i &lt; 10; i++)
    {
        printf(&quot;%d: &quot;, i);
        for (int j = 0; j &lt; count[i] / 10; j++)
            printf(&quot;*&quot;);
        printf(&quot;\n&quot;);
    }
}
</code></pre>
<h3 id="c风格-2">C++风格</h3>
<p>从C++11开始，C++标准规定了随机数设施，包括均匀随机位生成器（Uniform random bit generators，URBG）和随机数分布等，定义在<code>&lt;random&gt;</code>中。</p>
<p>URBG分为随机数引擎、引擎适配器、预置随机数生成器和非确定随机数生成器4类，通常后两类就够用了。</p>
<p>标准规定了3种随机数引擎：</p>
<ul>
<li>
<p>线性同余<code>linear_congruential_engine</code>（LCG），时间空间消耗都少；</p>
</li>
<li>
<p>梅森旋转<code>mersenne_twister_engine</code>（MT），占用较多内存（在PC上可以忽略），计算量较大；</p>
</li>
<li>
<p>带进位减法（属于滞后斐波那契生成器，LFG）<code>subtract_with_carry_engine</code>，性能与效果折中。</p>
</li>
</ul>
<p>随机数引擎都需要一个种子，生成的都是伪随机数。</p>
<p>引擎适配器可以套一个随机数引擎：</p>
<ul>
<li>
<p><code>discard_block_engine</code>在连续若干个伪随机数中选择若干个；</p>
</li>
<li>
<p><code>independent_bits_engine</code>把位数多的伪随机数压缩成位数少的；</p>
</li>
<li>
<p><code>shuffle_order_engine</code>把连续若干个伪随机数重排。</p>
</li>
</ul>
<p>套娃的方式是模板，理论上你还可以用适配器套适配器，不过CPU可能会有意见。</p>
<p>随机数引擎的模板参数怎么取？标准定义了一些数学家们发现的效果良好的随机数引擎：LCG <code>minstd_rand0</code>、<code>minstd_rand</code>、<code>knuth_b</code>；MT <code>mt19937</code>、<code>mt19937_64</code>；LFG <code>ranlux24_base</code>、<code>ranlux48_base</code>、<code>ranlux24</code>、<code>ranlux48</code>。如果你还是无从下手，那就用<code>default_random_engine</code>，编译器的开发者们为你选好了他们认为最合适的，在MSVC中是<code>mt19937</code>，在GCC中是<code>minstd_rand0</code>。</p>
<p>以上工具都生成伪随机数，标准还定义了真·随机数引擎<code>random_device</code>，尽管标准也允许它是伪随机的。如果它是真随机的，那么使用起来它的效果无疑是最好的，但是多次调用后性能会急剧下降，通常只用于生成伪随机数引擎的种子。</p>
<p>随机数生成器类型都定义了静态方法<code>min</code>和<code>max</code>，返回生成的随机数的范围，以及无参数的函数调用运算符<code>operator()</code>，返回随机数。</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;random&gt;

int main()
{
    auto engine = std::default_random_engine(std::random_device()());
    std::cout &lt;&lt; &quot;min = &quot; &lt;&lt; engine.min() &lt;&lt; &quot;; max = &quot; &lt;&lt; engine.max() &lt;&lt; std::endl;
    std::cout &lt;&lt; &quot;random numbers: &quot;;
    for (int i = 0; i != 10; ++i)
        std::cout &lt;&lt; engine() &lt;&lt; ' ';
    std::cout &lt;&lt; std::endl;
}
</code></pre>
<p>大多数情况下我们不需要<code>min</code>到<code>max</code>范围的整数，而需要一定分布的整数或实数。标准规定了许多随机数分布类型，我数学不好，不太懂这些。</p>
<ul>
<li>
<p>均匀分布<code>uniform_int_distribution</code>、<code>uniform_real_distribution</code>；</p>
</li>
<li>
<p>伯努利分布<code>bernoulli_distribution</code>、<code>binomial_distribution</code>、<code>negative_binomial_distribution</code>、<code>geometric_distribution</code>；</p>
</li>
<li>
<p>泊松分布<code>poisson_distribution</code>、<code>exponential_distribution</code>、<code>gamma_distribution</code>、<code>weibull_distribution</code>、<code>extreme_value_distribution</code>；</p>
</li>
<li>
<p>正态分布<code>normal_distribution</code>、<code>lognormal_distribution</code>、<code>chi_squared_distribution</code>、<code>cauchy_distribution</code>、<code>fisher_f_distribution</code>、<code>student_t_distribution</code>；</p>
</li>
<li>
<p>抽样分布<code>discrete_distribution</code>、<code>piecewise_constant_distribution</code>、<code>piecewise_linear_distribution</code>。</p>
</li>
</ul>
<p>构造分布实例时传入分布的参数。调用<code>operator()</code>获得结果，参数为随机数引擎。</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;random&gt;
#include &lt;string&gt;

int main()
{
    auto engine = std::default_random_engine(std::random_device()());
    std::uniform_int_distribution&lt;int&gt; uniform(0, 9);
    int count[10] = {0};
    for (int i = 0; i != 10000; ++i)
        ++count[uniform(engine)];
    for (int i = 0; i != 10; ++i)
        std::cout &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; std::string(count[i] / 10, '*') &lt;&lt; std::endl;
}
</code></pre>
<p>注意，与STL中左闭右开的习惯不同，<code>uniform_int_distribution</code>构造函数接受的参数是闭区间。</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		<p class="postfoot">
			posted on 
<span id="post-date">2020-04-18 23:14</span>&nbsp;
<a href="https://www.cnblogs.com/jerry-fuyi/">jerry_fuyi</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12728941" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12728941);return false;">收藏</a>
		</p>
	</div>
	
	
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 525569, cb_blogApp = 'jerry-fuyi', cb_blogUserGuid = '976af27c-3f06-453c-e544-08d7006bad27';
    var cb_entryId = 12728941, cb_entryCreatedDate = '2020-04-18 23:14', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


</div>

<p id="footer">
	Powered by: 
	<br />
	
	
<a href="https://www.cnblogs.com/" id="Footer1_Hyperlink3" style="font-size: 12px; font-family: Verdana">博客园</a>
	<br />
	Copyright &copy; 2020 jerry_fuyi
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

</p>




    
</body>
</html>