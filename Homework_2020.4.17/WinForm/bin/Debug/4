<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta property="og:description" content="终于上岸了呜呜呜...,终于又能愉快的写代码了 tip:为方便阅读部分内容细节使用折叠 自我介绍 大三双非本科,大一开始学前端,今年2月底开始投实习,不久前终于收到了美团的offer,心花怒放 初生牛" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>2020前端春招经验分享,从面试小白到老油条的蜕变 - 粥里有勺糖 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=BKtyzabbeYJEVOaELkxmRjHbp7LT-v37GzrU5S24bJk" />
    <link id="MainCss" rel="stylesheet" href="/skins/codinglife/bundle-codinglife.min.css?v=hlpQ1CJDwwJXDxv2HNauUmW3NjyWzoMaw1uER19SLT0" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/codinglife/bundle-codinglife-mobile.min.css?v=XjHfryC9ctsatIZz1dHn7TsRIqmwz9c3aj_6SCfHSDM" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/roseAT/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/roseAT/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/roseAT/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=VSP5rTXbJNpNidklGdgoLgwCGyUPITrcsmlgoaMKz3w"></script>
    <script>
        var currentBlogId = 465742;
        var currentBlogApp = 'roseAT';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'CodingLife';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/roseAT/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/roseAT/">粥里有勺糖</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/roseAT/">
首页</a>
</li>
<li>


</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E7%B2%A5%E9%87%8C%E6%9C%89%E5%8B%BA%E7%B3%96">
联系</a></li>
<li>

<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
98&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
20</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/roseAT/p/12730479.html">2020前端春招经验分享,从面试小白到老油条的蜕变</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
    <div id="cnblogs_post_description" style="display: none">
        <img src="http://img.cdn.sugarat.top/mdImg/MTU4NzI1Mjg2NDM5Mg==587252864392" class="desc_img">
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
    <blockquote>
<p>终于上岸了呜呜呜...,终于又能愉快的写代码了</p>
</blockquote>
<p><em>tip:为方便阅读部分内容细节使用折叠</em></p>
<p><img src="http://img.cdn.sugarat.top/mdImg/MTU4NzEzMjEzMjc4NQ==587132132785" alt="图片"></p>
<h1 id="自我介绍">自我介绍</h1>
<p>大三双非本科,大一开始学前端,今年2月底开始投实习,不久前终于收到了美团的offer,心花怒放</p>
<p><strong>初生牛犊不怕虎,前期没好好准备,浪费了太多好机会,奉劝大家一定要好好复习和总结</strong></p>
<details>
  <summary>
  <font color='3eaf7c'>→面试历程(不含笔试时间)</font>
  </summary>
  <ol>
    <li>2月25日:阿里淘系一面</li>
    <li>2月26日:CVTE一面(凉)</li>
    <li>3月13日:腾讯一面</li>
    <li>3月23日:阿里淘系二面(凉)</li>
    <li>3月24日:字节一面(凉)</li>
    <li>3月25日:腾讯二面</li>
    <li>3月26日:腾讯三面(凉)</li>
    <li>3月28日:美团一面</li>
    <li>3月31日:美团二面</li>
    <li>4月03日:美团hr面</li>
    <li>4月03日:蘑菇街一面</li>
    <li>4月09日:蘑菇街二面(拒)</li>
    <li>4月10日:TW一面</li>
    <li>4月10日:腾讯换部门捞起来一面(凉)</li>
    <li>4月12日:百度一,二,三面技术</li>
    <li><font color='3eaf7c'>4月13日:美团OC(上岸)</font></li>
    <li>4月16日:网易云一面</li>
    <li>4月16日:TW二面</li>
  </ol>
</details>
<blockquote>
<p>当淘系前端二面凉了之后,周围同学都陆续上岸了,我开始慌了,就海投了一波</p>
</blockquote>
<p><img src="http://img.cdn.sugarat.top/mdImg/MTU4NzE3NjQxNjA1NA==587176416055" alt="图片"></p>
<details>
  <summary>
  <font color='3eaf7c'>→目前还在流程中</font>
  </summary>
  <ol>
    <li>百度</li>
    <li>TW</li>
    <li>网易云</li>
    <li>腾讯</li>
    <li>快手</li>
  </ol>
</details>
<p>下面开始干货分享,请各位细细品,如有不足之处还请斧正</p>
<h1 id="面试前应该做哪些准备">面试前应该做哪些准备?</h1>
<h2 id="1一些知识储备">1.一些知识储备</h2>
<blockquote>
<p>这里主要是根据我的面试经验总结的一些面试高频的知识点供大家参考,以树形结构展开(避免贴图劝退)</p>
</blockquote>
<blockquote>
<p>对前端的计算机基础考查相比后端开发已经简单了许多,大厂一二面也特别爱考查这部分内容</p>
</blockquote>
<blockquote>
<p>如果并没有深入了解或使用Node,大家可以不用刻意去准备Node</p>
</blockquote>
<details>
  <summary>
  <font color='3eaf7c'>计算机基础知识</font>
  </summary>
  <ul>
    <li>
    <details>
        <summary>
        <font color='3eaf7c'>算法与数据结构</font>
        </summary>
        <ol>
            <li>链表</li>
            <li>堆/栈</li>
            <li>哈希表</li>
            <li>二叉树</li>
            <li>各种排序,尤其是快排</li>
            <li>BST</li>
            <li>KMP</li>
            <li>二分</li>
        </ol>
        </details>
    </li>
    <li>
    <details>
        <summary>
        <font color='3eaf7c'>操作系统</font>
        </summary>
        <ol>
            <li>线程相关的问题</li>
            <li>进程相关的问题</li>
            <li>进程与线程进行对比所产生的问题</li>
        </ol>
        </details>
    </li>
    <li>
    <details>
        <summary>
        <font color='3eaf7c'>计算机网络</font>
        </summary>
        <ol>
            <li>TCP相关</li>
            <li>UDP相关</li>
            <li>HTTP相关</li>
            <li>DNS相关</li>
        </ol>
        </details>
    </li>
    <li>
    <details>
        <summary>
        <font color='3eaf7c'>设计模式</font>
        </summary>
        <ol>
            <li>工厂模式</li>
            <li>抽象工厂模式</li>
            <li>单例模式</li>
        </ol>
        </details>
    </li>
  </ul>
</details>
<details>
  <summary>
  <font color='3eaf7c'>大前端</font>
  </summary>
  <ul>
    <li>
    <details>
        <summary>
        <font color='3eaf7c'>JS(包含ES6)</font>
        </summary>
        <ol>
            <li>DOM事件触发的几个阶段(捕获,目标,冒泡)相关问题</li>
            <li>值类型与引用类型相关问题</li>
            <li>函数柯里化</li>
            <li>闭包</li>
            <li>this指向判断</li>
            <li>apply,call,bind</li>
            <li>event loop</li>
            <li>promise</li>
            <li>定时器</li>
            <li>原型与原型链</li>
            <li>箭头函数</li>
            <li>类型转换</li>
            <li>async与await</li>
            <li>类数组</li>
            <li>节流防抖</li>
            <li>垃圾回收机制</li>
            <li>typeof与instanceof</li>
            <li>==与===</li>
            <li>JS中的继承实现</li>
            <li>let,const,var区别</li>
            <li>各种遍历数组的方式比较(for,forof,forin,forEach)</li>
        </ol>
        </details>
    </li>
    <li>
    <details>
        <summary>
        <font color='3eaf7c'>CSS</font>
        </summary>
        <ol>
            <li>回流与重绘</li>
            <li>盒模型</li>
            <li>弹性布局(flex)</li>
            <li>栅栏布局(grid)</li>
            <li>display各种值及其作业</li>
            <li>position各种值及其作用</li>
            <li>BFC(概念,如何触发,特点)</li>
            <li>display:none,visibility:hidden,opacity:0区别</li>
            <li>CSS层级关系,样式权重计算</li>
            <li>CSS伪类</li>
            <li>CSS伪元素</li>
            <li>斑马纹实现</li>
            <li>简单动画的实现</li>
            <li>小球从屏幕左滚动到右xxxpx</li>
            <li>子元素相对于父元素水平居中的方法</li>
            <li>子元素相对于父元素水平垂直居中的方法</li>
            <li>如何做页面主题(皮肤)切换</li>
        </ol>
        </details>
    </li>
    <li>
    <details>
        <summary>
        <font color='3eaf7c'>VUE(针对没看源码)</font>
        </summary>
        <ol>
            <li>数据双向绑定,数据响应式实现的原理</li>
            <li>生命周期</li>
            <li>组件之间通信方法(父子,兄弟,祖孙,任意)</li>
            <li>v-if,v-show异同</li>
            <li>路由原理,为什么地址发生改变,浏览器不会刷新</li>
            <li>权限管理</li>
        </ol>
        </details>
    </li>
    <li>
    <details>
        <summary>
        <font color='3eaf7c'>浏览器</font>
        </summary>
        <ol>
            <li>缓存机制</li>
            <li>页面渲染原理(过程)</li>
            <li>本地存储</li>
            <li>浏览器安全相关问题(SQL注入,XSS,CSRF,DNS劫持,点击劫持)</li>
            <li>跨域相关问题(原因,解决方式)</li>
            <li>同源策略</li>
            <li>预检请求</li>
        </ol>
        </details>
    </li>
        <li>
    <details>
        <summary>
        <font color='3eaf7c'>性能优化</font>
        </summary>
        <ol>
            <li>Webpack代码打包优化</li>
            <li>网络层面优化</li>
            <li>首屏加载优化</li>
        </ol>
        </details>
    </li>
    <li>
    <details>
        <summary>
        <font color='3eaf7c'>小程序</font>
        </summary>
        <ol>
            <li>小程序的特点</li>
            <li>你对小程序的发展看法</li>
            <li>小程序的原理</li>
            <li>小程序与传统移动端Web的区别</li>
        </ol>
        </details>
    </li>
    <li>
    <details>
        <summary>
        <font color='3eaf7c'>Node</font>
        </summary>
        <ol>
            <li>node中的Event loop</li>
            <li>node中的进程与线程相关问题</li>
        </ol>
        </details>
    </li>
    <li>
    正则表达式简单使用
    </li>
  </ul>
</details>
<p><img src="http://img.cdn.sugarat.top/mdImg/MTU4NzIyMDkxMzc0OQ==587220913749" alt="图片"></p>
<p><img src="http://img.cdn.sugarat.top/mdImg/MTU4NzI1Mjg2NDM5Mg==587252864392" alt="图片"></p>
<h2 id="2总结自己的项目">2.总结自己的项目</h2>
<blockquote>
<p>如果你的项目非常有意思的话,不妨多多总结一下其闪光点,如果你的项目非常有意思,很容易与面试官产生共鸣,妥妥的面试+分,也能让他留下一个印象</p>
</blockquote>
<p>主要从:</p>
<ul>
<li>项目背景</li>
<li>对于多人协作项目在项目中所担任的职责,以及对项目的贡献</li>
<li>遇到了什么难题,如何解决的</li>
<li>项目的创新点</li>
<li>你有什么收获</li>
<li>项目所用技术栈,项目产出(web(PC/Mobile),app,小程序?)</li>
</ul>
<p>这几个方面,更加细节之处可以参考<a href="https://juejin.im/post/5e7aed9c6fb9a07cac1d872d">面试被问项目经验不用慌，按这个步骤回答绝对惊艳</a></p>
<h2 id="3根据当前面试的进度做相应的复习">3.根据当前面试的进度做相应的复习</h2>
<blockquote>
<p>部分公司的职位可能需要4+1 甚至 5+1 ,小生太菜鸡,尚未触及</p>
</blockquote>
<p>对于2+1的面试</p>
<ul>
<li>一面:计算机基础+前端相关</li>
<li>二面:项目+计算机基础+前端相关</li>
<li>hr面:非技术的开放性问题</li>
</ul>
<p>对于3+1的面试</p>
<ul>
<li>一,二面:计算机基础+前端相关</li>
<li>三面:项目+非技术开放性问题+一点点大前端相关</li>
<li>hr面:非技术的开放性问题</li>
</ul>
<h2 id="4面试中自我介绍打草稿">4.面试中自我介绍打草稿</h2>
<blockquote>
<p>大多数面试开场就是叫你介绍一下自己,这个环节还是非常重要的,说得好,能够面试官留下深刻印象</p>
</blockquote>
<blockquote>
<p>但需要注意在自我介绍的时候,不要给自己挖坑,面试官一般会根据你自我介绍中的项目经历,或者个人技术栈展开提问,如果对某一门技术栈只停留在使用/了解阶段(Hello World),尽量不要提</p>
</blockquote>
<ol>
<li>个人基本信息:姓名,目前状况(大三,应届),兴趣爱好</li>
<li>前端的学习经历</li>
<li>实习经历</li>
<li>项目经历可以简单介绍一下
<ol>
<li>你收货最大的项目</li>
<li>最近做的一个项目</li>
<li>自己最自豪的个人作品</li>
</ol>
</li>
</ol>
<h2 id="5面试中常常问的非技术问题准备">5.面试中常常问的非技术问题准备</h2>
<blockquote>
<p>一定要自己下来打打草稿,临场发挥难免不完美</p>
</blockquote>
<details>
    <summary>
    <font color='3eaf7c'>展开查看</font>
    </summary>
    <ol>
        <li>除开发外有什么其他兴趣爱好吗</li>
        <li>毕业后直接工作还是考研,为什么不考研</li>
        <li>未来/近5年的职业规划</li>
        <li>你认为自己的优势/长处是什么</li>
        <li>你认为自己有什么不足之处</li>
        <li>为什么选择前端</li>
        <li>平时是如何学习的,最近在看什么</li>
        <li>如何平衡学校的课程学习与前端的自学与开发</li>
        <li>你觉得自己最成功的一次分享或者成果是什么</li>
        <li>有投其它公司吗?有结果了没?为什么没过,你知道原因吗</li>
        <li>为什么选择我们</li>
    </ol>
</details>
<h1 id="面试中">面试中</h1>
<ol>
<li>如果是初次面试难免会紧张,这个不可避免,随着面试次数增加应增加自己的自信心,减少紧张时间</li>
<li>语速不能过快</li>
<li>面试官提问后,不要急于回答,可以在大脑中思考几秒中整理回答的思路,再脱口而出,出口成章,减少回答时卡顿</li>
<li>当遇到手撕代码的时候,如果思考了一段时间,一点思路都没有,就直接给面试官说,避免长时间耗着(面试时长是有限的一般技术面再1小时左右短的30-40分钟)</li>
<li>手撕代码,如果你有解决方案即便不是最优的也可以写上,然后面试官会问你有不有更优的解法(或者优化空间),你可以借此再思考一小会儿,没有的话直接告知面试官(部分面试官在当你结束这题作答的时候,会告诉你一个解法的思路)</li>
<li>一般在面试快结束时,面试官会问你有什么问题需要问他,不要说没有问题,可以问问部门的一些情况,面试官职级,负责的产品,前端部门有开源项目没,当前面试的什么部门,未来工作Base在哪里等等,也可以聊聊与工作无关的,畅所欲言,<strong>交流得愉快的话也能给面试加分</strong></li>
</ol>
<h1 id="面试后">面试后</h1>
<p>及时整理面试内容,大多数情况下面试都会遇到知识盲点,一定要下来去查资料了解,填上这个点,为下次面试做足准备</p>
<p>如果面完了HR面切忌不要放松(除非有100%的把握通过),身边不少HR面挂掉的例子,不然还是继续投,该笔试的笔试,该面就面</p>
<h1 id="面试中所遇问题整理附部分自我回答">面试中所遇问题整理(附部分自我回答)</h1>
<blockquote>
<p>以面试题类型分类整理,为什么不按公司分?在我看来同一个公司不同的人面难有太多相同的面试题,只有综合多家的经验才能百战不殆</p>
</blockquote>
<details>
    <summary>
    <font color='3eaf7c'>
        <h2 style='display:inline'>0.在浏览器中输入URL到页面渲染的整个过程(详解,非常高频的考点)</h2>
    </font>
    </summary>
<h2 id="构建请求行">构建请求行</h2>
<pre><code class="language-text">GET   /     HTTP/1.1
方法  请求路径 请求的协议/版本
</code></pre>
<h2 id="查找强缓存">查找强缓存</h2>
<p>检查资源是否存在强缓存,存在的话直接进行资源解析</p>
<h2 id="读取dns缓存">读取DNS缓存</h2>
<ol>
<li>浏览器先检查自身缓存中有没有被解析过的这个域名对应的ip地址，如果有，解析结束</li>
<li>检查操作系统缓存中有没有对应的已解析过的结果(win中的hosts文件)</li>
<li>都没有则进行下一步</li>
</ol>
<h2 id="dns解析">DNS解析</h2>
<ol>
<li>请求本地域名服务器（LDNS）来解析这个域名,没有则进行下一步</li>
<li>DNS 根服务器查询</li>
</ol>
<h2 id="建立tcp连接">建立TCP连接</h2>
<p>可以在此简述建立TCP链接的3次握手的过程</p>
<ol>
<li><code>客户端</code>向<code>服务端</code>发送请求报文</li>
<li><code>服务端</code>收到请求报文,同意连接则向<code>客户端</code>发送一个应答</li>
<li><code>客户端</code>收到<code>服务端</code>的应答,并告知<code>服务端</code>我准备好了</li>
</ol>
<p>TCP 的一些特性</p>
<ul>
<li>建立连接需要进行三次握手</li>
<li>断开连接都需要四次握手</li>
<li>在传输数据的过程中，通过各种算法保证数据的可靠性</li>
<li>相比 UDP 来说不那么的高效。</li>
</ul>
<h2 id="判断是否是https请求">判断是否是Https请求</h2>
<p>是:进行<code>TLS握手</code></p>
<p><strong>基本过程</strong></p>
<ol>
<li>客户端向服务器端索要并验证公钥</li>
<li>双方协商生成”对话密钥”</li>
<li>双方采用”对话密钥”进行加密通信</li>
</ol>
<blockquote>
<p>在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信</p>
</blockquote>
<p>否:发起Http请求</p>
<h2 id="发送http请求">发送HTTP请求</h2>
<p>向服务端正式发送http请求</p>
<h2 id="返回http报文">返回HTTP报文</h2>
<p>服务器处理请求响应结果,并返回Http报文</p>
<p><strong>判断状态码是什么?</strong></p>
<p>200:继续解析，如果 4xx 或 5xx 的话就会报错，如果 3xx 进行重定向</p>
<p>如果是<strong>gzip</strong>格式的话会先解压一下，然后通过文件的编码格式去解码文件</p>
<h2 id="浏览器解析渲染页面">浏览器解析渲染页面</h2>
<ol>
<li>针对下载完成后的HTML文件
<ul>
<li>词法分析:标记化</li>
<li>语法分析:构建DOM树</li>
</ul>
</li>
<li>解析HTML(超文本标记语言)--&gt;DOM(文档对象模型)树
<ul>
<li>遇到 script 标签的话，会判断是否存在 async 或者 defer属性
<ul>
<li>async:并行进行下载,下载完成后并执行js</li>
<li>defer:先并行下载文件，然后等待 HTML 解析完成后顺序执行。</li>
<li>如果都没有:就会阻塞住渲染流程直到 JS 下载并执行完毕</li>
</ul>
</li>
<li>遇到link下载并解析CSS(层叠样式表)--&gt;CSSOM(CSS对象模型)树
<ul>
<li>link标签引用</li>
<li>style标签中的样式</li>
<li>元素的内嵌style属性</li>
</ul>
</li>
</ul>
</li>
<li>DOM树 + CSSOM树 --&gt; Render Tree(渲染树):CSSOM 树和 DOM 树构建完成后开始生成渲染树</li>
<li>回流(Layout):根据生成的渲染树,回流得到节点的几何信息(位置,尺寸)
<ul>
<li>计算可见的Dom节点在设备视口的位置和尺寸,这个计算阶段就是回流</li>
<li>为了知道每个可见节点在视口的确切大小和位置,浏览器从渲染树的根节点进行遍历</li>
</ul>
</li>
<li>重绘(Painting):根据渲染树与回流得到的节点几何信息,得到节点的绝对像素
<ul>
<li>经过生成的渲染树和回流阶段,得到了所有可见节点具体的几何信息与样式,然后将渲染树的每个节点转换成屏幕上的实际像素,这个阶段就叫重绘节点</li>
</ul>
</li>
<li>将像素发送给GPU绘制,合成图层,然后展示在页面上</li>
</ol>
<h2 id="断开tcp连接">断开TCP连接</h2>
<p>简述断开进行4次数握手过程</p>
<ol>
<li><code>客户端</code>对<code>服务端</code>发送释放连接的请求</li>
<li><code>服务端</code>收到<code>客户端</code>的请求后,告知应用层释放连接</li>
<li><code>服务端</code>将数据发送完毕后,再向<code>客户端</code>发送释放连接请求</li>
<li><code>客户端</code>收到释放请求后,并向<code>服务端</code>发送确认释放的应答,同意释放</li>
</ol>
</details>
<details>
    <summary>
    <font color='3eaf7c'>
        <h2 style='display:inline'>1.算法与数据结构</h2>
    </font>
    </summary>
    <ol>
        <li>查找一个字符串是否在另一个字符串中存在,考查KMP</li>
        <li>链表转置,迭代/递归</li>
        <li>合并两个有序链表</li>
        <li>合并两棵BST</li>
        <li>构建BST</li>
        <li>二叉树前/中/后序遍历</li>
        <li>TopK问题</li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>二叉树深度优先/DFS,广度优先(层序遍历)/BFS</font>
            </summary>
<pre><code class="language-js">// DFS借助栈
function dfs(root){
    let stack = []
    if(!root){
        stack.push(root)
    }
    while(stack.length!==0){
        let node = stack.pop()
        console.log(node.value)
        if(node.right){
            stack.push(node.right)
        }
        if(node.left){
            stack.push(node.left)
        }
    }
}

// BFS借助队列
function bfs(root){
    let queue = []
    if(!root){
        queue.push(root)
    }
    while(queue.length!==0){
        let node = queue.shift()
        console.log(node.value)
        if(node.left){
            stack.push(node.left)
        }
        if(node.right){
            stack.push(node.right)
        }
    }
}
</code></pre>
</details>
        </li>
        <li>
                <details>
            <summary>
            <font color='3eaf7c'>快速排序</font>
            </summary>
<pre><code class="language-js">function quickSort(array) {
    const _quickSort = (arr, left, right) =&gt; {
        if (left &gt;= right) {
            return
        }
        let o = left
        let start = left
        let end = right
        while (left &lt; right) {
            while (arr[right] &gt;= arr[o] &amp;&amp; right &gt; left) {
                right--
            }
            while (arr[left] &lt;= arr[o] &amp;&amp; left &lt; right) {
                left++
            }
            if (left !== right) {
                swap(arr, left, right)
            }
        }
        [arr[o],arr[left]] = [arr[left],arr[o]]
        _quickSort(arr, start, left - 1)
        _quickSort(arr, left + 1, end)
    }
    _quickSort(array, 0, array.length - 1)
}
</code></pre>
</details>
        </li>
    </ol>
</details>
<details>
    <summary>
    <font color='3eaf7c'>
        <h2 style='display:inline'>2.计算机网络</h2>
    </font>
    </summary>
    <ol>
        <li>TCP与UDP的区别</li>
        <li>简述HTTP(把你知道的与HTTP相关的都吐露出来)</li>
        <li>HTTP中常用首部字段有哪些?你了解哪些HTTP首部</li>
        <li>HTTP状态码有哪些,各代表什么</li>
        <li>HTTP常用方法有哪些</li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>简述UDP</font>
            </summary>
<ul>
<li>面向无连接:不需要在正式传递数据之前先连接起双方</li>
<li>数据报文的搬运工:不保证有序且不丢失的传递到对端</li>
<li>没有任何控制流量的算法,以恒定速率传输</li>
<li>适用于对网络通讯质量要求不高但实时性要求高的地方
<ul>
<li>直播,语音,视屏等场景</li>
</ul>
</li>
</ul>
</details>
        </li>
        <li>
            <details>
            <summary>
            <font color='3eaf7c'>简述TCP</font>
            </summary>
<ul>
<li>面向有连接:建立链接三次握手,断开四次握手</li>
<li>在传输数据的过程中，通过各种算法保证数据的可靠性</li>
<li>应用场景
<ul>
<li>HTTP</li>
<li>FTP</li>
<li>网游</li>
</ul>
</li>
</ul>
</details>
        </li>
        <li>
                    <details>
            <summary>
            <font color='3eaf7c'>为什么TCP要经历三次握手,不是一次或者两次</font>
            </summary>
<ul>
<li>防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误</li>
<li>如果一次:客户端发送连接请求后，没有收到服务端的应答，是没法判断连接是否成功的</li>
<li>如果两次:客户端发送连接请求后，等待服务器端的应答。如过客户端的SYN过了一段时间没有到达服务器端，客户端链接超时，会重新发送一次连接，如果重发的这次服务器端收到了，且应答了客户端，连接就建立了。但是建立后，第一个SYN也到达服务端了，这时服务端会认为这是一个新连接，会再给客户端发送一个ACK，这个ACK当然会被客户端丢弃。但是此时服务器端已经为这个连接分配资源了，而且服务器端会一直维持着这个资源，会造成浪费</li>
</ul>
</details>
        </li>
                <li>
                    <details>
            <summary>
            <font color='3eaf7c'>HTTP与HTTPS的区别</font>
            </summary>
<ul>
<li>HTTP是明文传输的</li>
<li>HTTP(80) 和 HTTPS(443) 使用不同的端口</li>
<li>HTTP 页面响应速度比 HTTPS 快</li>
<li>HTTPS 是建构在 SSL/TLS 之上的 HTTP 协议,HTTPS 比 HTTP 要更耗费服务器资源</li>
<li>HTTPS是在HTTP上建立SSL/TLS加密层，并对传输数据进行加密</li>
</ul>
</details>
        </li>
        <li>
                    <details>
            <summary>
            <font color='3eaf7c'>HTTP2的特点</font>
            </summary>
<ul>
<li>多路复用</li>
<li>Header压缩</li>
<li>服务端主动 Push资源</li>
<li>HTTP/2 中引入了新的编码机制，所有传输的数据都会被分割，并采用二进制格式编码</li>
</ul>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>HTTP2使用条件</font>
            </summary>
<ul>
<li>支持Http2的服务端与客户端</li>
<li>域名就必须是https(基于TLS/1.2或以上版本的加密连接)</li>
</ul>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>简述TLS协议工作过程</font>
            </summary>
<p>利用非对称加密实现身份认证和密钥协商，对称加密算法采用协商的密钥对数据加密，基于散列函数验证信息的完整性</p>
</details>
        </li>
    </ol>
</details>
<details>
    <summary>
    <font color='3eaf7c'>
        <h2 style='display:inline'>3.操作系统</h2>
    </font>
    </summary>
    <ol>
        <li>线程与进程的概念/区别/如何工作</li>
        <li>进程|线程之间如何通信的</li>
        <li>进程如何切换</li>
    </ol>
</details>
<details>
    <summary>
    <font color='3eaf7c'>
        <h2 style='display:inline'>4.JS</h2>
    </font>
    </summary>
    <ol>
         <li>
        <details>
            <summary>
            <font color='3eaf7c'>为什么typeof null == 'object'|null是对象吗</font>
            </summary>
<p>null不是对象</p>
<blockquote>
<p>虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object</p>
</blockquote>
</details>
        </li>
         <li>
        <details>
            <summary>
            <font color='3eaf7c'>什么是函数柯里化</font>
            </summary>
<p>把一个接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回(接受剩下的参数而且返回结果的)新函数的技术</p>
</details>
        </li>
         <li>
        <details>
            <summary>
            <font color='3eaf7c'>对象类型和原始值类型的不同之处</font>
            </summary>
<p><strong>对象</strong></p>
<ul>
<li>对象类型存储的是(地址)指针:声明一个对象会在内存中开辟一块空间存放值</li>
<li>变量赋值的时候是赋值的地址:新变量修改会影响原变量</li>
<li>存在深浅拷贝问题</li>
</ul>
<p><strong>值类型</strong></p>
<ul>
<li>赋值的时候拷贝的一个新的值,不会影响原来的</li>
</ul>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>typeof能否正确判断类型</font>
            </summary>
<p>能够判断</p>
<ul>
<li>number</li>
<li>string</li>
<li>boolean</li>
<li>undefined</li>
<li>symbol</li>
<li>function</li>
</ul>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>instanceof能正确判断类型的原因是什么</font>
            </summary>
<ul>
<li>通过原型链进行判断</li>
<li>每个对象都有一个原型,instanceof会沿着原型链进行判断,直到最顶层原型为止</li>
<li>可以通过<code>Symbol.hasInstance</code>重定义instanceof的行为,所以instanceof的结果不一定绝对正确</li>
</ul>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>什么是原型,原型链</font>
            </summary>
<ul>
<li>每一个js对象在创建的时候就会自动关联另一个对象，这个对象就是<code>原型</code>，每一个对象都会从原型&quot;继承&quot;属性</li>
<li>相互关联的原型组成的链状结构就是<code>原型链</code></li>
</ul>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>this指向如何判断,箭头函数的 this 是什么</font>
            </summary>
<ul>
<li>对于普通函数来说,this-&gt;window</li>
<li>对于对象来说,谁调用函数谁就是this</li>
<li>new 的方式,this永远被绑定在实例上</li>
<li>bind/call/apply对于这些函数来说，this 取决于第一个参数，如果第一个参数为空，那么就是 window</li>
<li>不管给函数 bind 几次，function中的 this 永远由第一次 bind 决定</li>
<li>箭头函数本身是没有this</li>
<li>箭头函数中的this取决于包裹箭头函数的第一个普通函数的this</li>
<li>箭头函数使用bind,call,this无效</li>
</ul>
<p><strong>一个笔试题</strong></p>
<pre><code class="language-js">let obj2 = {
    name: 'obj2'
}

const obj = {
    name: 'obj',
    say1() {
        console.log(this.name)
    },
    obj1: {
        name: 'obj1',
        say2() {
            console.log(this.name);
        }
    },
    say3() {
        const fn = () =&gt; {
            console.log(this.name);
        }
        fn()
    },
    say4() {
        const fn = function () {
            console.log(this.name);
        }
        fn()
    },
    say5() {
        const fn = () =&gt; {
            console.log(this.name);
        }
        fn.call(obj2)
    },
    say6() {
        const fn = function () {
            console.log(this.name);
        }
        fn.call(obj2)
    }
}

let a = obj.say1
let b = obj.obj1.say2
a() 
b()
obj.say1()
obj.obj1.say2()
obj.say3()
obj.say4()
obj.say5()
obj.say6()
</code></pre>
<p>结果</p>
<pre><code class="language-js">undefined
undefined
obj
obj1
obj
undefined
obj
obj2
</code></pre>
</details>
        </li>
                <li>
        <details>
            <summary>
            <font color='3eaf7c'>== 和 === 有什么区别</font>
            </summary>
<p><strong>==</strong></p>
<ul>
<li>首先会判断两者类型是否相同。相同的话就直接进行比较</li>
<li>如果对比双方的类型不一样的话，就会进行类型转换</li>
<li>null 与 undefined : true</li>
<li>string 与 number : string-&gt;number</li>
<li>其中一方为 boolean:boolean -&gt; number</li>
<li>object 与 string、number、symbol : object -&gt; 原始值类型</li>
</ul>
<p><strong>===</strong></p>
<ul>
<li>判断两者类型和值是否相同,都相同则<code>true</code></li>
</ul>
</details>
        </li>
                <li>
        <details>
            <summary>
            <font color='3eaf7c'> 什么是闭包,其特点与缺点</font>
            </summary>
<p><strong>1.简单定义</strong></p>
<p><code>闭包</code>就是能够读取其它函数内部变量的函数</p>
<p><strong>2.使用场景</strong></p>
<ul>
<li>需要重用一个变量,又要保护变量不会被污染</li>
<li>将一个变量长期驻扎在内存当中可用于循环取值</li>
<li>私有变量计数器,外部无法访问,避免全局变量额污染</li>
</ul>
<p><strong>3.特点</strong></p>
<p>参数与变量不会被垃圾回收机制回收</p>
<p><strong>4.与作用域相比较</strong></p>
<ul>
<li>全局变量
<ul>
<li>优:可重用</li>
<li>缺:容易污染</li>
</ul>
</li>
<li>局部变量
<ul>
<li>优:不会被污染,仅函数内部可用</li>
<li>缺:不可重用</li>
</ul>
</li>
</ul>
<p><strong>5.缺点</strong></p>
<ul>
<li>比普通函数占用更多的内存。</li>
<li>内存泄漏的影响，当内存泄漏到一定程度会影响你的项目运行变得卡顿等等问题</li>
<li>释放方法:将引用内层函数对象的变量赋值为null</li>
</ul>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>浅拷贝/深拷贝是什么,如何实现?</font>
            </summary>
<p><strong>浅拷贝</strong></p>
<ul>
<li>只拷贝一层,深层次的对象只能拷贝对象的引用</li>
</ul>
<p><strong>浅拷贝实现</strong></p>
<ul>
<li><code>Object.assign</code></li>
<li>展开运算符<code>...</code></li>
</ul>
<p><strong>深拷贝</strong></p>
<ul>
<li>完整的拷贝一个深层次的对象</li>
</ul>
<p><strong>深拷贝实现</strong></p>
<blockquote>
<p>面试中一般不会考虑过多的边界问题,一般考查递归实现一个能够拷贝对象与数组混合的对象</p>
</blockquote>
<ul>
<li>JSON.parse(JSON.stringify(object))
<ul>
<li>忽略undefined</li>
<li>忽略symbol</li>
<li>不能序列化函数</li>
<li>不能解决循环引用的对象</li>
</ul>
</li>
<li>递归实现deepClone</li>
</ul>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>Promise 有几种状态,分别是什么</font>
            </summary>
<p>三种状态</p>
<ul>
<li>pending:等待</li>
<li>resolved:完成</li>
<li>rejectde:拒绝</li>
</ul>
<p>一旦从等待状态变成为其他状态就永远不能更改状态</p>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>你了解async/await吗,简单描述一下</font>
            </summary>
<ul>
<li>特点
<ul>
<li>一个函数如果加上async 那么其返回值是Promise,async 就是将函数返回值使用 Promise.resolve() 进行包裹</li>
<li>await只能配合async使用 不能单独使用</li>
</ul>
</li>
<li>优点
<ul>
<li>相比于Promise来说优势在于能够写出更加清晰的调用链</li>
</ul>
</li>
<li>缺点
<ul>
<li>因为await将异步代码变成了同步代码,如果多个异步之间没有关系,会导致性能降低</li>
</ul>
</li>
<li>原理
<ul>
<li>await 就是 generator 加上 Promise 的语法糖，且内部实现了自动执行 generator</li>
</ul>
</li>
</ul>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>事件的触发过程是怎么样的</font>
            </summary>
<p>事件触发有三个阶段:</p>
<ul>
<li>捕获阶段</li>
<li>目标阶段</li>
<li>冒泡阶段</li>
</ul>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>什么是事件代理</font>
            </summary>
<p>如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话应该注册在父节点上</p>
<ul>
<li>节省内存,不需要给每个子节点注册一次</li>
<li>不需要给子节点注销事件</li>
</ul>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>什么是同源策略,什么是跨域,如何解决</font>
            </summary>
<p>浏览器有<code>同源策略</code>,如果:<code>协议</code>,<code>端口</code>,<code>域名</code>有一个不同就是<code>跨域</code></p>
<p><strong>解决方法</strong></p>
<ul>
<li>jsonp</li>
<li>服务端开启CROS支持</li>
<li>Nginx反向代理</li>
</ul>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>你知道什么是预检请求吗</font>
            </summary>
<p>使用后端开启CROS解决跨域的方式，会把请求分成两种类型:</p>
<ul>
<li>简单请求</li>
<li>复杂请求</li>
</ul>
<p>对于复杂请求，首先会发起一个预检请求,请求方法为options,通过该请求来判断服务器是否允许跨域</p>
</details>
        </li>
        <li>
        <details>
            <summary>
            <font color='3eaf7c'>你知道什么是event loop,简单描述一下</font>
            </summary>
<blockquote>
<p>执行 JS 代码的时候其实就是往执行栈中放入函数,当遇到异步的代码时，会被挂起并在需要执行的时候加入到 Task（有多种 Task） 队列中,一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行</p>
</blockquote>
<p><strong>Event Loop执行顺序</strong></p>
<ul>
<li>同步代码</li>
<li>执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行</li>
<li>执行 微任务,如果在执行microtask的过程中，又产生了microtask，那么会加入到队列的末尾，也会在这个周期被调用执行</li>
<li>执行完所有微任务后，如有必要会渲染页面:
<ul>
<li>判断document是否需要更新:浏览器是 60Hz 的刷新率，每 16.6ms 才会更新一次。</li>
<li>判断是否有 resize 或者 scroll 事件，有的话会去触发事件:所以 resize 和 scroll 事件也是至少 16ms 才会触发一次，并且自带节流功能。</li>
<li>判断是否触发了 media query</li>
<li>更新动画并且发送事件</li>
<li>判断是否有全屏操作事件</li>
<li>执行 requestAnimationFrame 回调</li>
<li>更新界面</li>
</ul>
</li>
<li>然后开始下一轮 Event Loop，执行宏任务中的异步代码，也就是 setTimeout 中的回调函数</li>
</ul>
<p><strong>总结</strong></p>
<ul>
<li>宏队列macrotask一次只从队列中取一个任务执行，执行完后就去执行微任务队列中的任务</li>
<li>微任务队列中所有的任务都会被依次取出来执行，直到microtask queue为空</li>
<li>只要执行UI rendering，它的节点是在执行完所有的microtask之后，下一个macrotask之前，紧跟着执行UI render</li>
</ul>
<p><strong>微任务</strong></p>
<ul>
<li>promise</li>
<li>MutationObserver</li>
<li>process.nextTick（node）</li>
</ul>
<p><strong>宏任务</strong></p>
<ul>
<li>script</li>
<li>xhr</li>
<li>setTimeout</li>
<li>setInterval</li>
<li>setImmediate(node)</li>
<li>requestAnimationFrame(浏览器)</li>
<li>I/O</li>
<li>UI rendering(浏览器)</li>
</ul>
</details>
        </li>
                <li>
        <details>
            <summary>
            <font color='3eaf7c'>var、let 及 const 区别</font>
            </summary>
<p>全局作用域下:</p>
<ul>
<li>使用 var 声明的变量会被挂载到window上</li>
<li>使用 let 和 const 声明的变量，不会被挂载到 window 上</li>
<li>使用 var 声明的变量会被提升到作用域的顶部,函数也会被提升，并且优先于变量提升</li>
</ul>
<p>let 与 const 不能在声明前就使用,作用基本一致,后者声明的变量不能再次赋值</p>
</details>
        </li>
        <li>ES6有哪些新特性,你了解到的</li>
    </ol>
</details>
<details>
    <summary>
    <font color='3eaf7c'>
        <h2 style='display:inline'>5.CSS</h2>
    </font>
    </summary>
    <ol>
        <li>
        <details>
            <summary>
                <font color='3eaf7c'>
                    什么是回流与重绘
                </font>
            </summary>
<p><strong>回流</strong></p>
<p>计算可见的Dom节点在设备视口的位置和尺寸,这个计算阶段就是<code>回流</code></p>
<p>为了知道每个可见节点在视口的确切大小和位置,浏览器从渲染树的根节点进行遍历</p>
<p><strong>重绘</strong></p>
<p>经过生成的渲染树和回流阶段,得到了所有可见节点具体的几何信息与样式,然后将渲染树的每个节点转换成屏幕上的实际像素,这个阶段就叫<code>重绘</code>节点<br>
</details><br>
</li><br>
<li><br>
<details><br>
<summary><br>
<font color='3eaf7c'><br>
CSS层级关系<br>
</font><br>
</summary></p>
<p><strong>权重</strong></p>
<ul>
<li>tag(标签选择器):1</li>
<li>class(类选择器):10</li>
<li>id(id选择器):100</li>
<li>tag行内样式:1000</li>
<li>!important最大</li>
</ul>
<p>权重一样的情况下,后声明的覆盖前面的<br>
</details><br>
</li><br>
<li><br>
<details><br>
<summary><br>
<font color='3eaf7c'><br>
你了解BFC吗,如何触发<br>
</font><br>
</summary><br>
BFC规范(块级格式化上下文：block formatting context)</p>
<ul>
<li>规定了内部的Block Box如何布局:内部的Box会在垂直方向上一个接一个放置</li>
<li>Box垂直方向的距离由margin决定</li>
<li>每个元素的margin box 的左边，与包含块border box的左边相接触</li>
<li>BFC的区域不会与float box重叠</li>
<li>属于同一个BFC的两个相邻Box的margin会发生重叠</li>
<li>计算BFC的高度时，浮动元素也会参与计算</li>
<li>隔离的独立容器，容器里面的子元素不会影响到外面的元素</li>
</ul>
<p><strong>如何触发</strong></p>
<ul>
<li>float值不为none</li>
<li>overflow不为visible</li>
<li>display的值为inline-block、table-cell、table-caption</li>
<li>position的值为absolute或fixed<br>
</details><br>
</li><br>
<li>弹性布局flex</li><br>
<li>栅栏布局grid</li><br>
<li>display属性值有哪些,分别是什么作用</li><br>
<li>position属性值有哪些,分别有什么作用</li><br>
<li>display:none,opactiy:0,visibility:hidden区别</li>  </ol>
</li>
</ul>
</details>
<details>
    <summary>
    <font color='3eaf7c'>
        <h2 style='display:inline'>6.VUE</h2>
    </font>
    </summary>
    <ol>
        <li>数据双向绑定,数据响应式实现的原理</li>
        <li>生命周期</li>
        <li>组件之间通信方法(父子,兄弟,祖孙,任意)</li>
        <li>v-if,v-show异同</li>
        <li>路由原理,为什么地址发生改变,浏览器不会刷新</li>
        <li>权限管理</li>
    </ol>
</details>
<details>
    <summary>
    <font color='3eaf7c'>
        <h2 style='display:inline'>7.浏览器相关问题</h2>
    </font>
    </summary>
    <ol>
        <li>缓存机制</li>
        <li>页面渲染原理(过程)</li>
        <li>本地存储</li>
        <li>浏览器安全相关问题(SQL注入,XSS,CSRF,DNS劫持,点击劫持)</li>
    </ol>
</details>
<details>
    <summary>
    <font color='3eaf7c'>
        <h2 style='display:inline'>8.性能优化</h2>
    </font>
    </summary>
    <ol>
        <li>Webpack代码打包优化</li>
        <li>网络层面优化</li>
        <li>首屏加载优化</li>
    </ol>
</details>
<details>
    <summary>
    <font color='3eaf7c'>
        <h2 style='display:inline'>9.小程序</h2>
    </font>
    </summary>
    <ol>
        <li>小程序的特点</li>
        <li>你对小程序的发展看法</li>
        <li>小程序的原理</li>
        <li>小程序与传统移动端Web的区别</li>
    </ol>
</details>
<p><em>因篇幅有限,内容太多,部分未回答的内容与6-9部分的题目回答,都整理在了我的→<a href="https://sugarat.top">博客</a>←中,欢迎大家戳链接查看</em></p>
<blockquote>
<p>下面分享(水货)一下个人是如何跳进前端这个&quot;坑&quot;</p>
</blockquote>
<h1 id="在校经历">在校经历</h1>
<p>专业是&quot;计算机科学与技术&quot;,学院的培养方向为嵌入式开发工程师,在上大学前,想的学计算机学做游戏,大一开学后的新生研讨课就直接来了当头一棒,专业只教嵌入式相关知识</p>
<p>我想嵌入式就嵌入式嘛,哪晓得培养计划也太落后了,全是理论课,实验课也是给个试验箱,比着实验报告一步步做,啥东西都学不到.跟我想象中的(智能电子设备开发)差太远了,然后就自学U3D去了,学了几个月听说独立游戏开发没有&quot;钱途&quot;,就刹车了,刚好学校有个软件开发的比赛,跟同学组了个队就参加了,三个人(1划水,1JAVA,我就只好搞前端了),这一搞就覆水难收了,从此踏上前端不归路</p>
<p>最开始学的东西非常杂,周围也没有前端大佬,自己摸索着学习,走了不少弯路,接了不少商业外包和学校的比赛项目,导致后端技术也蹭蹭蹭的学了不少,但还没有一个深入的点,大二的时候就在考虑到底做后端还是前端亦或是&quot;伪全栈(会写页面+CRUD)&quot;,后来思考了一段时间选择了前端,觉得前端更容易出成果,更容易实现自己的想法,然后开始系统性的学习前端</p>
<p>在大三的时候开始准备复习春招找工作,看了看牛客上的面经,发现好多技术名词都不知道,很多点自己都还不会,被做项目的能力迷惑了,心想凉了,自己开始慌了,然后把手里的项目加急赶完,然后杜绝一切外包和学校的项目,开始紧张的复习</p>
<p><strong>比较喜欢的一句鸡汤</strong></p>
<center><h2>你的指尖,拥有改变世界的力量</h2></center>
<p>当没有学习动力的时候,默念几遍鸡汤,想想未来的规划,然后就又充满学习的激情了</p>
<h1 id="最后">最后</h1>
<p>感谢掘金的各位大佬,是大佬们分享的经验把我抬进大厂的,<br>
非常感谢阿里淘系的面试官提的建议,及时指出了我面试中的一些问题,最终虽然没有通过阿里的面试,但受益匪浅,依旧感到非常幸运</p>
<p><a href="https://juejin.im/post/5e9aae596fb9a03c4d410a0d">掘金原文</a><br>
<strong>个人站点</strong></p>
<ul>
<li><a href="https://github.com/ATQQ">Github</a></li>
<li><a href="https://sugarat.top">博客</a></li>
<li><a href="https://www.cnblogs.com/roseAT/">博客园</a></li>
</ul>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-19 10:38</span>&nbsp;
<a href="https://www.cnblogs.com/roseAT/">粥里有勺糖</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12730479" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12730479);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 465742, cb_blogApp = 'roseAT', cb_blogUserGuid = 'd2a8b6ae-286b-44dc-3744-08d62cb3b3ac';
    var cb_entryId = 12730479, cb_entryCreatedDate = '2020-04-19 10:38', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 粥里有勺糖
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>