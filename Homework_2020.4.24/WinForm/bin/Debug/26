<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="这个月的8号、9号，个人很荣幸参加了China.NET Conf 2019 , 中国.NET开发者峰会，同时分享了技术专题《.NET技术架构下的混沌工程实践》，给广大的.NET开发小伙伴介绍混沌工程和" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>China .NET Conf 2019-.NET技术架构下的混沌工程实践 - Eric zhou - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=MH15aYd6DmX-6TABpA2xkiKENy3GAhiM2dh5rOPH89I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=X7swQJ1TyCJAf6FMVjDPbYhUAiMdNFddEy1-m0_TbFQ" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/tianqing/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/tianqing/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/tianqing/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 27084;
        var currentBlogApp = 'tianqing';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleBlue';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/tianqing/">I love .net</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/tianqing/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Eric%20zhou">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/tianqing/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
101&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
400</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/tianqing/p/11870088.html">China .NET Conf 2019-.NET技术架构下的混沌工程实践</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>这个月的8号、9号，个人很荣幸参加了China.NET Conf 2019 , 中国.NET开发者峰会，同时分享了技术专题《.NET技术架构下的混沌工程实践》，给广大的.NET开发小伙伴介绍混沌工程和高可用性改造实践。会后大家伙聚餐的时候，陈计节老师建议大家将各自的议题分享到社区，分享给大家。因此，今天和大家分享我的技术专题《.NET技术架构下的混沌工程实践》。</p>
<p>先放几张大会照片：</p>
<p><img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191116073620430-2135333245.png" alt="" width="1431" height="954" /></p>
<p>整个专题主要分为四个部分：</p>
<ol>
<li>.NET分布式、微服务架构下的高可用性挑战</li>
<li>混沌工程简介</li>
<li>.NET混沌工程的实践和成果分享</li>
<li>展望和规划</li>
</ol>
<p><span style="font-size: 16px;"><strong>一、.NET分布式、微服务架构下的高可用性挑战</strong></span></p>
<p>目前，我们特来电的技术架构是分布式、微服务化的，线上超过1000台Server，高可用保障压力很大：</p>
<ul>
<li>系统7*24小时运行，不允许宕机，一旦宕机出问题，直接影响全国人民出行；</li>
<li>系统SLA要求99.95% ，全年可宕机时间只有4.38小时；</li>
<li>服务调用链路越来越长，依赖越来越复杂，某个环节出问题，都有肯能导致服务雪崩、大规模宕机；</li>
<li>线上遭遇：网络抖动、内存泄露、线程阻塞、CPU被打爆、 数据库被打爆、中间件宕机等棘手问题；</li>
<li>每天上百次发布更新，系统高可用性保障压力非常大；</li>
</ul>
<p>一张全链路监控图可以反映我们系统的复杂：</p>
<p>&nbsp;</p>
<p><img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115224422380-1595767811.png" alt="" width="1216" height="541" /></p>
<p>例如主机CPU被打爆的问题，线上经常会遇到：</p>
<p><img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115224547254-592721823.png" alt="" width="871" height="431" /></p>
<p>经历了线上各种高可用性问题后，我们做了很多反思和总结：</p>
<p>系统在实现了分布式、微服务化之后，我们到底有多少把握来保证系统的正常运行？&nbsp;&nbsp;</p>
<p>如果出现问题，整个分布式系统会变得非常&ldquo;混乱&rdquo;，甚至会引发系统的大规模宕机。</p>
<p>因此，我们有必要在线上事故出现之前，提前识别出系统有哪些弱点和问题，统一管控系统的固有混沌。</p>
<p>这套管控系统固有混沌的方法和体系，就是我们今天要介绍的主角：<strong>混沌工程</strong>。</p>
<p><strong>二、混沌工程简介</strong></p>
<p><strong>1. 什么是混沌工程？</strong></p>
<div class="cnblogs_code">
<pre><strong>通过受控的实验，掌握系统运行行为的过程，称为混沌工程。</strong></pre>
</div>
<p>&nbsp; &nbsp; 混沌工程的典型实践：Chaos Monkey<br />&nbsp; &nbsp; &nbsp;一只捣乱的猴子，在你的系统里面上蹦下窜，不停捣乱，直到搞挂你的系统。</p>
<p>&nbsp; &nbsp;&nbsp;<img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115224856660-1168636264.png" alt="" width="352" height="230" /></p>
<p><strong>2. 为什么需要混沌工程？</strong></p>
<p>&nbsp; &nbsp;混沌工程可以提升整个系统的弹性。<br />&nbsp; &nbsp;通过混沌实验，可以发现系统<strong>脆弱</strong>的一面，<strong>主动发现这些问题</strong>，并<strong>解决这些问题</strong>。</p>
<p><strong>3. 混沌工程怎么做？</strong></p>
<p>&nbsp; &nbsp;混沌工程的一般实施步骤：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;"><strong>1 选择系统正常运行状态下的可度量指标，作为基准的&ldquo;稳定状态&rdquo;
2 混沌实验分为实验组和对照组，都能保持系统的&ldquo;稳定状态&rdquo;
3 对实验组注入混沌事件，如服务不可用、中间件宕机等混沌事件
4 比较实验组和对照组&ldquo;稳定状态&rdquo;的差异</strong></span></pre>
</div>
<p>&nbsp; &nbsp;如果混沌实验前后系统的&ldquo;稳定状态&rdquo;一致，则可以认为系统应对这种混沌事件是弹性的、高可用的。<br />&nbsp; &nbsp;相反的，如果打破了系统的稳定状态，我们就找到了一个系统弱点，然后尽可能地解决它，提升系统的高可用性。</p>
<p><strong>4. 实施混沌工程的推荐原则</strong></p>
<ul>
<li>明确系统稳定运行的状态（指标）</li>
<li>混沌事件必须是现实世界可能发生的（合理的）</li>
<li>在生产环境进行混沌实验 ：生产环境可以真实地反映系统的稳定性</li>
<li>持续集成：线上应用每天都在更新，通过持续集成的方式可以不断发现问题、解决问题。</li>
<li>最小化影响范围：线上进行混沌实验，必须可控，必须确定混沌实验的最小化影响范围。</li>




</ul>
<p>&nbsp; &nbsp;这里大家会问：<strong>在生产环境上搞混沌实验，能行吗？</strong></p>
<p><strong>5. 现实中的混沌工程</strong></p>
<p>&nbsp; 生产环境必须以稳定为前提，因此推荐O2O模式的混沌实验：即线下演练、线上验证<br />&nbsp; 在系统未经过大规模高可用性改造之前，建议首先进行全面的线下演练：</p>
<p>&nbsp; &nbsp;<img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115225221882-1228286549.png" alt="" width="884" height="286" /></p>
<p>&nbsp; &nbsp;那么, .NET技术架构下的混沌工程怎么做？</p>
<p><span style="font-size: 16px;"><strong>三、.NET混沌工程的实践和成果分享</strong></span></p>
<p>&nbsp; 我们线上系统主要用到了以下.NET技术栈和开源技术：</p>
<ul>
<li>ASP.NET MVC</li>
<li>基于ASP.NET Core的Web运行框架-WRF</li>
<li>基于ASP.NET Web API的分布式服务网关-SG</li>
<li>基于.NET RPC通讯技术的分布式微服务平台-HSF</li>
<li>基于RabbitMQ和Kafka的消息应用中心-MAC</li>
<li>iBatis.NET &amp; Entity Framework</li>
<li>RabbitMQ &amp; RabbitMQ Client for .NET</li>
<li>Kafka &amp; Confluent.Kafka</li>
<li>Redis</li>
<li>Nginx</li>
<li>&hellip;</li>




</ul>
<p>&nbsp; &nbsp; 在上述.NET 技术架构下，我们梳理了大量的混沌工程事件：</p>
<p>&nbsp; &nbsp;&nbsp;<img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115225542177-261211312.png" alt="" width="927" height="533" /></p>
<p>&nbsp; &nbsp;&nbsp;<img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115225603149-1849136168.png" alt="" width="929" height="542" /></p>
<p>&nbsp; &nbsp;&nbsp;<img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115225646073-1390397354.png" alt="" width="808" height="295" /></p>
<p>&nbsp; &nbsp; &nbsp;<strong>通过大量的混沌实验，我们逐步建立了提升系统高可用性的方法论和体系：</strong></p>
<p><strong>&nbsp; &nbsp; &nbsp;<img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115225727963-1001261806.png" alt="" width="826" height="405" /></strong></p>
<p><strong>&nbsp; &nbsp; &nbsp;.NET技术架构下的高可用性改进-依赖治理、容错降级&nbsp; &nbsp; &nbsp;</strong></p>
<p><strong>&nbsp; &nbsp; &nbsp; 业务场景：</strong><br />&nbsp; &nbsp; &nbsp; 随着业务复杂度的上升，服务调用链路越来越长，链路上存在大量不可控的因素：&nbsp; &nbsp; &nbsp;&nbsp;</p>
<ul>
<li style="list-style-type: none;">
<ul>
<li>网络抖动，导致服务异常</li>
<li>Redis、MQ、DB等中间件不可用，导致服务超时、异常</li>
<li>依赖的服务不可用，直接影响服务调用方&nbsp;&nbsp;</li>



</ul>



</li>




</ul>
<p>&nbsp; &nbsp; &nbsp;<img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115225914874-696587820.png" alt="" width="677" height="171" />&nbsp; &nbsp; &nbsp;</p>
<p>&nbsp; &nbsp; &nbsp;<strong>如何应对：</strong>识别强弱依赖，对弱依赖进行降级，对强依赖有限降级&nbsp; &nbsp; &nbsp;</p>
<ul>
<li style="list-style-type: none;">
<ul>
<li>&ldquo;用户有感知&rdquo; 是强依赖</li>
<li>&ldquo;用户无感知&rdquo; 是弱依赖</li>
<li>故障发生时，核心业务有损失的是强依赖，无损失的是弱依赖</li>



</ul>



</li>




</ul>
<p>&nbsp; &nbsp; &nbsp;&nbsp;<img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115230028980-719042313.png" alt="" width="686" height="268" />&nbsp; &nbsp; &nbsp;</p>
<p>&nbsp; &nbsp; &nbsp; .NET技术架构下的高可用性改进-<strong>解耦/隔离</strong><strong>&nbsp; &nbsp; &nbsp; &nbsp;</strong></p>
<p>&nbsp; &nbsp; &nbsp; <strong>业务场景：</strong><br />&nbsp; &nbsp; &nbsp; 核心业务的调用链路很长，整个链路上包含主流程和辅流程<br />&nbsp; &nbsp; &nbsp; 辅流程的重要性低，不能因为辅流程的不可用，影响了主流程。</p>
<p>&nbsp; &nbsp; &nbsp;&nbsp;<img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115230157496-1621858219.png" alt="" width="808" height="323" /></p>
<p><strong>&nbsp; &nbsp; &nbsp; &nbsp;如何应对：</strong></p>
<p><strong>&nbsp; &nbsp; &nbsp; &nbsp;<img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115230217915-1657184150.png" alt="" width="810" height="391" /></strong></p>
<p><strong>&nbsp; &nbsp; &nbsp; &nbsp;.NET技术架构下的高可用性改进-超时治理</strong><strong>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong></p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;<strong>业务场景：</strong><br />&nbsp; &nbsp; &nbsp; &nbsp;对于服务超时，长时间等待会影响用户体验，并发大时还可能造成线程池被打爆。<br />&nbsp; &nbsp; &nbsp; &nbsp;同时可能产生服务级联反应，导致大范围服务雪崩。</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;<img src="https://img2018.cnblogs.com/blog/23525/201911/23525-20191115230344527-210252714.png" alt="" width="673" height="432" />&nbsp; &nbsp; &nbsp; &nbsp;</p>
<p><strong>&nbsp; &nbsp; &nbsp; &nbsp; 应对方案：</strong><br />&nbsp; &nbsp; &nbsp; &nbsp; 超时时间设置：服务刚上线时，可以根据压测情况预估一个值；<br />&nbsp; &nbsp; &nbsp; &nbsp; 服务上线后再根据实际监控进行修改，比如设置99%的请求响应时间为超时时间。<br />&nbsp; &nbsp; &nbsp; &nbsp; 超时后的处理策略：<br />&nbsp; &nbsp; &nbsp; &nbsp; 如果不是核心服务，可直接超时返回失败。<br />&nbsp; &nbsp; &nbsp; &nbsp; 如果是核心服务，可以设置相应的重试次数.&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
<p><strong>&nbsp; &nbsp; &nbsp; &nbsp; 示例：</strong><br />&nbsp; &nbsp; &nbsp; &nbsp; 配置服务超时时间<br />&nbsp; &nbsp; &nbsp; &nbsp; 设置Http请求超时时间<br />&nbsp; &nbsp; &nbsp; &nbsp; 设置数据库连接超时、SQL执行超时<br />&nbsp; &nbsp; &nbsp; &nbsp; 代码控制超时时间（例如：Polly的Timeout策略）</p>
<p><strong>&nbsp; &nbsp; &nbsp; .NET技术架构下的高可用性改进-重试补偿</strong><strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong></p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>业务场景：</strong><br />&nbsp; &nbsp; &nbsp; &nbsp; 实际线上应用中，假如遇到网络抖动、发布重启、数据库阻塞超时等情况，都有可能引起服务调用失败。&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
<p><strong>&nbsp; &nbsp; &nbsp; &nbsp; 应对方案：</strong><br />&nbsp; &nbsp; &nbsp; &nbsp; 通过失败重试、异常后的补偿，尽可能地保证业务可用。<br />&nbsp; &nbsp; &nbsp; &nbsp; 重试情况下：业务要保证幂等性、保证最终一致性。&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; <strong>示例：</strong><br />&nbsp; &nbsp; &nbsp; &nbsp; 服务失败重试策略<br />&nbsp; &nbsp; &nbsp; &nbsp; 消息发送、消费失败重试、补偿<br />&nbsp; &nbsp; &nbsp; &nbsp; 代码层面失败重试补偿（例如：Polly的Retry策略）</p>
<p>&nbsp; &nbsp; &nbsp; 高可用改进还有很多技巧，这里不一一详细给大家赘述了。</p>
<p>&nbsp; &nbsp; &nbsp;&nbsp;<strong>通过对系统进行全面的高可用性改进，提升了我们对线上系统的信心！</strong></p>
<p><strong>四、 展望和规划</strong></p>
<p>&nbsp; &nbsp; 2019年，我们启动了混沌工程实践，逐步建立了混沌工程的自有方法论和体系，通过近一年的混沌工程实践，混沌工程文化逐渐被开发团队所认可。目前，混沌工程已经逐步过渡到线上生产环境进行（这来自于足够的信心和把握）。但这只是一个起步，未来：</p>
<ul>
<li>正式的混沌工程团队：通过多团队配合、保障资源的持续投入</li>
<li>覆盖所有的关键核心应用：让混沌工程深入到每个产品</li>
<li>坚持O2O混沌工程实践：线下演练、线上验证，更可控</li>
<li>混沌事件注入工具：ChaosBlade for .NET，工具让混沌工程更高效</li>
<li>持续的混沌实验：持续进行、持续改进</li>




</ul>
<p>&nbsp; &nbsp; <strong>目标：通过混沌工程揭示问题、解决问题、形成闭环，不断提升系统高可用性。</strong></p>
<p>以上是本次China.NET Conf 2019的技术专题，分享给大家。</p>
<p>&nbsp;</p>
<p>周国庆</p>
<p>2019/11/15</p>
<p>&nbsp;</p>
<p><strong>&nbsp;</strong></p>
<div id="gtx-trans" style="position: absolute; left: -27px; top: 9122px;">&nbsp;</div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2019-11-15 23:10</span>&nbsp;
<a href="https://www.cnblogs.com/tianqing/">Eric zhou</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11870088" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(11870088);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 27084, cb_blogApp = 'tianqing', cb_blogUserGuid = 'ea753d0b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 11870088, cb_entryCreatedDate = '2019-11-15 23:10', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 Eric zhou
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    
</body>
</html>