<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="上一篇:Window Azure ServiceBus Messaging消息队列技术系列2-编程SDK入门 http://www.cnblogs.com/tianqing/p/5944573.htm" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Azure Messaging-ServiceBus Messaging消息队列技术系列3-消息顺序保证 - Eric zhou - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=MH15aYd6DmX-6TABpA2xkiKENy3GAhiM2dh5rOPH89I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=X7swQJ1TyCJAf6FMVjDPbYhUAiMdNFddEy1-m0_TbFQ" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/tianqing/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/tianqing/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/tianqing/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 27084;
        var currentBlogApp = 'tianqing';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleBlue';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/tianqing/">I love .net</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/tianqing/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Eric%20zhou">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/tianqing/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
101&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
400</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/tianqing/p/6527106.html">Azure Messaging-ServiceBus Messaging消息队列技术系列3-消息顺序保证</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>上一篇:Window Azure ServiceBus Messaging消息队列技术系列2-编程SDK入门 &nbsp;http://www.cnblogs.com/tianqing/p/5944573.html</p>
<p>介绍了Azure Service Bus的编程SDK（主要的编程接口）</p>
<p>本文中我们以实际的使用场景来说明Azure Messaging是否支持以及如何编码实现：<strong>消息的收发顺序保证</strong>。</p>
<p>消息的收发在实际业务中往往是有顺序的：发送时1-2-3-4-5，接收时也必须是1-2-3-4-5，即FIFO特性。</p>
<p>在本文的Demo中，我们模拟销售订单消息队列异步处理场景，消息体是一条SalesOrder，顺序发送，顺序接收。</p>
<p>1. 我们还是使用上篇博客中在Windows Azure的Portal上建立好的<strong>NameSpace</strong>：<strong>servicebustest</strong></p>
<p><strong>销售订单队列名称：OrderQueue</strong></p>
<p>2.简单封装一个Service Bus的工具类：ServiceBusUtils: 用于创建队列、删除队列、创建QueueClient、创建BrokerdMessage</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">using</span><span style="color: #000000;"> Microsoft.ServiceBus;
</span><span style="color: #0000ff;">using</span><span style="color: #000000;"> Microsoft.ServiceBus.Messaging;
</span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System;
</span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Collections.Generic;
</span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Linq;
</span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Runtime.Serialization;
</span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Text;
</span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Threading.Tasks;

</span><span style="color: #0000ff;">namespace</span><span style="color: #000000;"> AzureMessaging.FIFO
{
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> ServiceBus工具类
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">class</span><span style="color: #000000;"> ServiceBusUtils
    {
        </span><span style="color: #008000;">//</span><span style="color: #008000;">Namespace名称</span>
        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> <span style="color: #0000ff;">string</span> namespaceName = <span style="color: #800000;">"</span><span style="color: #800000;">servicebustest</span><span style="color: #800000;">"</span><span style="color: #000000;">;

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 创建队列
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name="queueName"&gt;</span><span style="color: #008000;">队列名称</span><span style="color: #808080;">&lt;/param&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name="isSession"&gt;</span><span style="color: #008000;">是否支持会话</span><span style="color: #808080;">&lt;/param&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> CreateQueue(<span style="color: #0000ff;">string</span> queueName, <span style="color: #0000ff;">bool</span> isSession = <span style="color: #0000ff;">true</span><span style="color: #000000;">)
        {
            </span><span style="color: #0000ff;">var</span> namespaceClient =<span style="color: #000000;"> NamespaceManager.Create();
            </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (namespaceClient.QueueExists(queueName))
            {
                namespaceClient.DeleteQueue(queueName);
            }

            </span><span style="color: #0000ff;">var</span> queue = <span style="color: #0000ff;">new</span> QueueDescription(queueName) { RequiresSession =<span style="color: #000000;"> isSession };
            namespaceClient.CreateQueue(queue);
        }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 删除队列
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name="queueName"&gt;</span><span style="color: #008000;">队列名称</span><span style="color: #808080;">&lt;/param&gt;</span>        
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> DeleteQueue(<span style="color: #0000ff;">string</span><span style="color: #000000;"> queueName)
        {
            </span><span style="color: #0000ff;">var</span> namespaceClient =<span style="color: #000000;"> NamespaceManager.Create();
            </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (namespaceClient.QueueExists(queueName))
            {
                namespaceClient.DeleteQueue(queueName);
            }
        }


        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 创建队列客户端
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;returns&gt;</span><span style="color: #008000;">队列客户端</span><span style="color: #808080;">&lt;/returns&gt;</span>
        <span style="color: #0000ff;">public</span> QueueClient GetQueueClient(<span style="color: #0000ff;">string</span> queueName, <span style="color: #0000ff;">bool</span> isSession = <span style="color: #0000ff;">false</span>, ReceiveMode mode =<span style="color: #000000;"> ReceiveMode.ReceiveAndDelete)
        {
            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> QueueClient.Create(queueName, mode);
        }
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 创建队列客户端
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;returns&gt;</span><span style="color: #008000;">队列客户端</span><span style="color: #808080;">&lt;/returns&gt;</span>
        <span style="color: #0000ff;">public</span> QueueClient GetReceiveQueueClient(<span style="color: #0000ff;">string</span> queueName, ReceiveMode mode =<span style="color: #000000;"> ReceiveMode.PeekLock)
        {
            </span><span style="color: #0000ff;">var</span> namespaceClient =<span style="color: #000000;"> NamespaceManager.Create();
            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> QueueClient.Create(queueName, mode);
        }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 构造消息
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name="serializableObject"&gt;</span><span style="color: #008000;">可序列化的对象</span><span style="color: #808080;">&lt;/param&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;returns&gt;</span><span style="color: #008000;">消息</span><span style="color: #808080;">&lt;/returns&gt;</span>
        <span style="color: #0000ff;">public</span><span style="color: #000000;"> BrokeredMessage Create(Object serializableObject)
        {
            </span><span style="color: #0000ff;">var</span> serializer = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DataContractSerializer(serializableObject.GetType(), 
                </span><span style="color: #0000ff;">new</span> DataContractSerializerSettings() { IgnoreExtensionDataObject = <span style="color: #0000ff;">true</span>, PreserveObjectReferences = <span style="color: #0000ff;">false</span><span style="color: #000000;"> });
            </span><span style="color: #0000ff;">var</span> message = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BrokeredMessage(serializableObject);
            message.Properties.Add(</span><span style="color: #800000;">"</span><span style="color: #800000;">Type</span><span style="color: #800000;">"</span><span style="color: #000000;">, serializableObject.GetType().ToString());

            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> message;
        }
    }
}</span></pre>
</div>
<p>2. 示例SalesOrder实体类</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">using</span><span style="color: #000000;"> System;
</span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Collections.Generic;
</span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Linq;
</span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Text;
</span><span style="color: #0000ff;">using</span><span style="color: #000000;"> System.Threading.Tasks;

</span><span style="color: #0000ff;">namespace</span><span style="color: #000000;"> AzureMessaging.FIFO
{
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
    <span style="color: #808080;">///</span><span style="color: #008000;"> 销售订单类
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
    <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> SalesOrder
    {
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 订单ID
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> OrderID { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span><span style="color: #000000;">; }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 订单编号
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">string</span> Code { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span><span style="color: #000000;">; }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 创建时间
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">public</span> DateTime CreateTime { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span><span style="color: #000000;">; }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 总价格
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">public</span> Decimal TotalPrice { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span><span style="color: #000000;">; }

        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 产品ID
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> ProductID { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">set</span><span style="color: #000000;">; }
    }
}</span></pre>
</div>
<p>3. 消息顺序发送</p>
<p>向OrderQueue发送10条消息订单消息，输出每条消息的顺序号以及MessageID</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> <span style="color: #0000ff;">string</span> queueName = <span style="color: #800000;">"</span><span style="color: #800000;">OrderQueue</span><span style="color: #800000;">"</span><span style="color: #000000;">;
    </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 发送消息
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> MessageSend()
        {
            </span><span style="color: #0000ff;">var</span> sbUtils = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ServiceBusUtils();

            </span><span style="color: #008000;">//</span><span style="color: #008000;">创建队列</span>
            sbUtils.CreateQueue(queueName, <span style="color: #0000ff;">false</span><span style="color: #000000;">);

            </span><span style="color: #008000;">//</span><span style="color: #008000;">顺序发送消息到OrderQueue</span>
            <span style="color: #0000ff;">var</span> queueSendClient =<span style="color: #000000;"> sbUtils.GetQueueClient(queueName);
            </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> i = <span style="color: #800080;">0</span>; i &lt; <span style="color: #800080;">10</span>; i++<span style="color: #000000;">)
            {
                </span><span style="color: #0000ff;">var</span> order = <span style="color: #0000ff;">new</span> SalesOrder() { OrderID = i.ToString(), Code = <span style="color: #800000;">"</span><span style="color: #800000;">SalesOrder_</span><span style="color: #800000;">"</span> + i, CreateTime = DateTime.Now, ProductID = <span style="color: #800080;">17967</span>, TotalPrice = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">decimal</span>(<span style="color: #800080;">19999</span><span style="color: #000000;">) };
                </span><span style="color: #0000ff;">var</span> message =<span style="color: #000000;"> sbUtils.Create(order);
                queueSendClient.Send(message);
                Console.WriteLine(</span><span style="color: #0000ff;">string</span>.Format(<span style="color: #800000;">"</span><span style="color: #800000;">Send {0} Message: {1}</span><span style="color: #800000;">"</span><span style="color: #000000;">, i, message.MessageId));
            }

            Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">Send Completed!</span><span style="color: #800000;">"</span><span style="color: #000000;">);
        }</span></pre>
</div>
<p>程序输出：</p>
<p><img src="https://images2015.cnblogs.com/blog/23525/201703/23525-20170309181836359-1902062294.png" alt="" /></p>
<p>4. 消息顺序接收</p>
<p>消费OrderQueue中的消息，验证消息的接收顺序</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> <span style="color: #0000ff;">string</span> queueName = <span style="color: #800000;">"</span><span style="color: #800000;">OrderQueue</span><span style="color: #800000;">"</span><span style="color: #000000;">;
 </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 接收消息
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> MessageReceive()
        {
            </span><span style="color: #0000ff;">int</span> index = <span style="color: #800080;">0</span><span style="color: #000000;">;
            BrokeredMessage msg </span>= <span style="color: #0000ff;">null</span><span style="color: #000000;">;
            </span><span style="color: #0000ff;">var</span> sbUtils = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ServiceBusUtils();
            </span><span style="color: #0000ff;">var</span> queueReveiveClient =<span style="color: #000000;"> sbUtils.GetReceiveQueueClient(queueName, ReceiveMode.ReceiveAndDelete);
            </span><span style="color: #0000ff;">while</span> ((msg = queueReveiveClient.Receive(TimeSpan.FromMilliseconds(<span style="color: #800080;">3</span>))) != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
            {
                Console.WriteLine(</span><span style="color: #0000ff;">string</span>.Format(<span style="color: #800000;">"</span><span style="color: #800000;">Received {0} Message: {1}</span><span style="color: #800000;">"</span><span style="color: #000000;">, index, msg.MessageId));
                index</span>++<span style="color: #000000;">;
            }

            </span><span style="color: #808080;">///</span><span style="color: #008000;">/删除队列</span>
            <span style="color: #008000;">//</span><span style="color: #008000;">sbUtils.DeleteQueue(queueName);</span>
<span style="color: #000000;">
            Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">Receive Completed!</span><span style="color: #800000;">"</span><span style="color: #000000;">);
        }</span></pre>
</div>
<p>程序输出：</p>
<p><img src="https://images2015.cnblogs.com/blog/23525/201703/23525-20170309182847219-2070024848.png" alt="" /></p>
<p>可以看出，Azure Messaging中ServiceBus对消息的收发是有顺序保证的。</p>
<p>下一篇我们继续其他特性的验证和介绍。</p>
<p>&nbsp;</p>
<p>周国庆</p>
<p>2017/3/9</p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2017-03-09 18:31</span>&nbsp;
<a href="https://www.cnblogs.com/tianqing/">Eric zhou</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=6527106" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(6527106);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 27084, cb_blogApp = 'tianqing', cb_blogUserGuid = 'ea753d0b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 6527106, cb_entryCreatedDate = '2017-03-09 18:31', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 Eric zhou
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    
</body>
</html>