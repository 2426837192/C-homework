<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="序 CLR，通用语言运行时，每个.Net 程序猿，都会第一时间接触到。记得2008年，第一次学习Jeffrey Richter的CLR Via C#，读的懵懵懂懂，大抵因为编码太少，理解的只是概念和皮" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>知识在与温故、总结-再读CLR - Eric zhou - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=MH15aYd6DmX-6TABpA2xkiKENy3GAhiM2dh5rOPH89I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=X7swQJ1TyCJAf6FMVjDPbYhUAiMdNFddEy1-m0_TbFQ" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/tianqing/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/tianqing/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/tianqing/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 27084;
        var currentBlogApp = 'tianqing';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleBlue';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/tianqing/">I love .net</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/tianqing/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Eric%20zhou">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/tianqing/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
101&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
400</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/tianqing/p/9160538.html">知识在与温故、总结-再读CLR</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p><strong>序</strong></p>
<p>CLR，通用语言运行时，每个.Net 程序猿，都会第一时间接触到。记得2008年，第一次学习Jeffrey Richter的CLR Via C#，读的懵懵懂懂，大抵因为编码太少，理解的只是概念和皮毛。10年之后，再次找出Jeffrey Richter的CLR Via C#这本书，重读CLR。归纳总结，同时加深自我的底层技术理解和深度。分享给大家自己的总结笔记：</p>
<p><strong>讲在前面的话</strong>：</p>
<p><strong>合抱之木，生于毫末；九层之台，起于垒土！</strong></p>
<p>整个.Net 大厦建筑的底层基础技术就是CLR，通用语言运行时。CLR给我们带来JIT、垃圾回收、MSIL、Meta Data、Application Domain等一系列概念，它们共同协作，合力打造了一个与非托管代码完全不同的一个新的开发环境。每个组件如何和谐地与其他组件协作，平稳地运行.Net 应用，只有深入了解CLR，才能&ldquo;<strong>拨开云雾见天日，守得云开见月明</strong>&rdquo;！</p>
<p><span style="font-size: 15px;"><strong>总结Part1：CLR是什么？ 我们的源码如何被编译成托管模块的？</strong></span></p>
<p><strong>&nbsp; CLR</strong>：公共语言运行时（Common Language Runtime，CLR），一个可以由多种不同编程语言使用的运行时。</p>
<p>&nbsp; Mircosoft面向CLR提供了几种编程语言编译器，包括：C#、VB、J#、C++、Jscript以及一个中间语言（Intermediate Language,IL）等编译器。因此，我们可以使用支持CLR的任何编程语言来创建源代码文件，实现实际的业务逻辑。</p>
<p>&nbsp; 创建源代码文件之后，要使用一个相对应的编译器来检查语法和分析源码，最后编译成一个&ldquo;托管模块&rdquo;。</p>
<p>&nbsp; <strong>托管模块</strong>是一个标准的32位Microsoft Windows可移植执行体（PE32）文件，后者是一个标准的64位Microsoft Windows可移植执行体（PE32+）文件，这些文件需要CLR才可以执行。</p>
<p>&nbsp; 将源代码编译为托管模块：</p>
<p>&nbsp;&nbsp;<img src="https://images2018.cnblogs.com/blog/23525/201806/23525-20180609184749464-1842863901.png" alt="" /></p>
<p>&nbsp; 所有CLR支持的编译器通过编译生成的都是&ldquo;中间语言（Intermediate Language，IL）代码&rdquo;，<strong>IL代码有时也称为托管代码，因为CLR会管理它的执行。</strong>除了生成IL，编译器还会在每个托管模块中生成完整的元数据，<strong>元数据Meta Data是一系列特殊的数据表</strong>，描述了模块中定义的内容，比如类型及成员。同时元数据表还记录了当前托管模块引用的内容，比如引用的类型及成员。</p>
<p>&nbsp; 托管模块由哪几个部分组成呢？</p>
<p>&nbsp;&nbsp;<img src="https://images2018.cnblogs.com/blog/23525/201806/23525-20180609184913581-1408723976.png" alt="" /></p>
<p><span style="font-size: 15px;"><strong>总结Part2：将托管代码编译为程序集</strong></span></p>
<p>&nbsp; &nbsp;将源代码编译为托管模块之后，CLR实际上并不和托管模块一起工作，相反，CLR与程序集一起工作。</p>
<p>&nbsp; &nbsp;程序集（assembly）是一个抽象的概念，是一个或者多个模块/资源文件的逻辑性分组。同时，程序集是一个最小的重用、安全性以及版本控制单元。</p>
<p>&nbsp; &nbsp;默认情况下，将托管模块和源文件转换成一个程序集的工作由编译器完成。</p>
<p>&nbsp; &nbsp;<img src="https://images2018.cnblogs.com/blog/23525/201806/23525-20180609185130686-1623431306.png" alt="" /></p>
<p><span style="font-size: 15px;"><strong>总结Part3：加载CLR</strong></span></p>
<p>&nbsp; &nbsp;我们编译的每个程序集既可以是一个可执行的应用程序，也可以是一个DLL（动态链接库，其中含有一系列有可执行程序使用的类型）。最终由CLR来管理这些程序集中的代码的执行。这就要求主机上必须安装.Net Framework.</p>
<p>&nbsp; &nbsp;在了解CLR具体如何加载之前，我们先了解下程序集的32位和64位版本问题，及支持X86和X64 Windows平台。在Visual Studio的Project属性Build选项中，可以选择Target Platform，如果选择X86，C#编译器生成的程序集包含一个PE32头，如果选择X64，将包含PE32+头。运行一个可执行文件时，Windows会检查这个EXE文件的头，判断应用程序需要的是32位地址空间，还是64位地址空间，具有PE32头的文件可以在32位和64位地址空间中运行，具有PE32+头的文件则要求一个64位地址空间。</p>
<p>&nbsp; &nbsp;以下总结了C#编译器指定不同的Platform选项，会得到什么托管模块，以及运行的Windows平台：</p>
<p>&nbsp; &nbsp;<img src="https://images2018.cnblogs.com/blog/23525/201806/23525-20180609185333051-40295133.png" alt="" /></p>
<p>&nbsp; &nbsp; Windows会检查EXE文件头，判断是32位进程，还是64位进程，或者Wow64进程之后，Windows在进程的地址空间中加载MSCoreEE.dll的X86、X64或者IA64版本，进程的主线程会调用MSCoreEE.dll内部定义的一个方法，这个方法会初始化CLR，加载EXE程序集，然后调用其入口方法（Main）方法。随即，被托管的应用程序将启动并运行。</p>
<p>&nbsp; &nbsp;&nbsp;如果一个非托管应用程序通过LoadLibrary来加载一个托管的程序集，Windows会加载并初始化CLR来处理包含在程序集中的代码。</p>
<p><strong>总结Part4：代码执行</strong></p>
<p>&nbsp; &nbsp;前面我们介绍了，<strong>托管程序集同时包含元数据和中间语言（IL），IL是一种与CPU无关的机器语言</strong>。</p>
<p>&nbsp; &nbsp;IL比大多数CPU机器语言要高级的多，IL能访问和操作对象类型，并提供相应的指令来创建和初始化对象，在对象上调用虚方法，并能直接操作数组元素，甚至提供了用于抛出异常和捕获异常的指令，以实现错误处理。因此IL可以被看作是一种面向对象的机器语言。</p>
<p>&nbsp; &nbsp;开发人员使用C#、VB、C++等高级语言来编程实现业务逻辑，这些高级语言的编译器会将源代码编译为IL。</p>
<p>&nbsp; &nbsp;为了执行具体的某一个方法，这个方法对应的IL首先必须转换为本地CPU指令。这是<strong>CLR的JIT（Just-in-time）即时编译器</strong>的职责。</p>
<p>&nbsp; &nbsp;<img src="https://images2018.cnblogs.com/blog/23525/201806/23525-20180609185800043-839781661.png" alt="" /></p>
<p>&nbsp; &nbsp; 上面这段代码是如何执行的？</p>
<p>&nbsp; &nbsp;&nbsp;在Main方法执行之前，CLR会检测出Main的代码引用的所有类型，CLR会分配一个<strong>内部数据结构，用于管理对引用类型的访问</strong>。</p>
<p>&nbsp; &nbsp;&nbsp;示例代码中，Main方法引用了单一类型Console，CLR为Console分配了一个单独的内部数据结构，Console类型中每个方法都对应一条记录，每条记录都容纳了一个地址，根据这个地址就可以找到方法的实现。CLR对这个内部数据结构初始化的时候，每条记录都设置成CLR内部包含的一个未文档化的函数，这个<strong>函数称为JITCompiler</strong>。</p>
<p>&nbsp; &nbsp;&nbsp;Main方法首次调用WriteLine时，会调用JITCompiler函数，<strong>JITCompiler函数负责将这个方法的IL代码编译为本地CPU指令</strong>，由于IL是&ldquo;即时&rdquo;编译的，所以通常将CLR这个即时编译组件称为<strong>JIT编译器</strong>。</p>
<p>&nbsp; &nbsp;&nbsp;<strong>第一次调用Console.WriteLine这个方法时：</strong></p>
<p>&nbsp; &nbsp;&nbsp;<img src="https://images2018.cnblogs.com/blog/23525/201806/23525-20180609190008874-1335054127.png" alt="" /></p>
<p>　　1. JITCompiler函数被调用时，它知道要调用哪个方法，以及具体的类型定义了该方法。<br />　　2. 然后，JITCompiler会在程序集的元数据中搜索被调用方法的IL。<br />　　3. JITCompiler验证IL代码，并将IL代码编译成本地CPU指令，同时本地CPU指令保存在一个动态分配的内存中。<br />　　4. 然后，JITCompiler回到CLR为类型创建的内部数据结构中，找到与被调用方法对应的那条记录，将最初调用它的那个引用替换成CPU指令内存块的地址。<br />　　5. 最后，JITCompiler函数会跳转到内存块中的代码（CPU指令），即Console.WriteLine方法的具体实现。<br />　　6. 代码执行完毕后，返回到Main方法中，继续执行其他代码。</p>
<p><strong>&nbsp; &nbsp; &nbsp; &nbsp;Main函数第二次调用Console.WriteLine方法</strong></p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;第二次调用时，由于已经对WriteLine方法进行了验证和编译，所以会直接执行内存块中代码（CPU指令），完全跳过了JITCompiler函数。因此，一个方法只有在第一次调用时才会造成一定的性能消耗。后续对此方法的调用都以本地代码的方法全速运行。</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;<img src="https://images2018.cnblogs.com/blog/23525/201806/23525-20180609190224919-1406441432.png" alt="" /></p>
<p>&nbsp; &nbsp; &nbsp;总结：</p>
<p>&nbsp; &nbsp; &nbsp;1.&nbsp;一个方法只有在第一次调用时的JIT编译才会造成一定的性能消耗。后续对此方法的调用都以本地代码的方法全速运行</p>
<p>&nbsp; &nbsp; &nbsp;2.&nbsp;JIT编译器将本地CPU指令保存在动态内存中，一旦应用程序终止，编译好的本地CPU指令代码会被丢弃。所以，如果关闭重新运行应用程序，或者同时启动了应用程序的两个实例（两个不同的进程），JIT编译器必须再次将IL编译成本地CPU指令.</p>
<p>&nbsp; &nbsp; &nbsp;3.&nbsp;对于大多数应用程序来说，因JIT编译造成的性能损失并不明显，大多数应用程序倾向于反复调用相同的方法。</p>
<p>&nbsp; &nbsp; &nbsp;4.&nbsp;同时，CLR的JIT编译器会对本地代码进行优化。代码在优化后将获得更出色的性能。</p>
<p>&nbsp; &nbsp; </p>
<p>&nbsp; &nbsp; 先临时写到这，10年后重读CLR Via C#，更多的收获是，对.Net 底层技术原理的理解更深，同时有了更敬畏之心。后续计划再重读更多内容，分享给大家。</p>
<p>&nbsp; &nbsp; 知识在与分享和总结！</p>
<p>&nbsp;</p>
<p>周国庆</p>
<p>2018/6/9</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2018-06-09 19:06</span>&nbsp;
<a href="https://www.cnblogs.com/tianqing/">Eric zhou</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=9160538" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(9160538);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 27084, cb_blogApp = 'tianqing', cb_blogUserGuid = 'ea753d0b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 9160538, cb_entryCreatedDate = '2018-06-09 19:06', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 Eric zhou
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    
</body>
</html>