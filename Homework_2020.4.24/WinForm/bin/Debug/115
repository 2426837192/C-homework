<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="性能是.Net Core一个非常关键的特性，今天我们重点研究一下ValueTuple&amp;lt;T&amp;gt;和Span&amp;lt;T&amp;gt;. 一、方法的多个返回值的实现，看ValueTuple&amp;lt;T&amp;gt" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>.Net Core技术研究-Span&lt;T&gt;和ValueTuple&lt;T&gt; - Eric zhou - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=MH15aYd6DmX-6TABpA2xkiKENy3GAhiM2dh5rOPH89I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=X7swQJ1TyCJAf6FMVjDPbYhUAiMdNFddEy1-m0_TbFQ" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/tianqing/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/tianqing/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/tianqing/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 27084;
        var currentBlogApp = 'tianqing';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleBlue';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/tianqing/">I love .net</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/tianqing/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Eric%20zhou">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/tianqing/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
101&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
400</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/tianqing/p/10589373.html">.Net Core技术研究-Span&lt;T&gt;和ValueTuple&lt;T&gt;</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>性能是.Net Core一个非常关键的特性，今天我们重点研究一下ValueTuple&lt;T&gt;和Span&lt;T&gt;.</p>
<p><span style="font-size: 16px;"><strong>一、方法的多个返回值的实现，看ValueTuple&lt;T&gt;</strong></span></p>
<p>日常开发中，假如我们一个方法有多个返回值，我们可能会用Out出参，或者使用一个自定义类/匿名类型，或者Tuple&lt;T&gt;.&nbsp;</p>
<ul>
<li>Out出参可以使用，但是在编写Async方法时不支持。</li>
<li>自定义类/匿名类型，需要我们根据返回值的结构，自定义一个类型，带来性能开销，同时增加了编码工作量，同时需要考虑跨域序列化的问题。</li>
<li>.Net Framework 4.0后引入了Tuple&lt;T&gt;元组，但是Item1，Item2,...不够友好，方法调用方需要了解分别代表的含义。</li>
</ul>
<p>现在我们看看ValueTuple&lt;T&gt;的实现</p>
<p>C# 7支持返回多个值的语言特性，我们写两个示例代码Tuple&lt;T&gt;和ValueTuple&lt;T&gt;，对比一下：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span>         <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
<span style="color: #008080;"> 2</span>         <span style="color: #808080;">///</span><span style="color: #008000;"> Tuple
</span><span style="color: #008080;"> 3</span>         <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
<span style="color: #008080;"> 4</span>         <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;returns&gt;&lt;/returns&gt;</span>
<span style="color: #008080;"> 5</span>         <span style="color: #0000ff;">private</span> Tuple&lt;<span style="color: #0000ff;">string</span>, List&lt;<span style="color: #0000ff;">int</span>&gt;&gt;<span style="color: #000000;"> GetValues()
</span><span style="color: #008080;"> 6</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 7</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> Tuple&lt;<span style="color: #0000ff;">string</span>, List&lt;<span style="color: #0000ff;">int</span>&gt;&gt;(<span style="color: #800000;">"</span><span style="color: #800000;">C7</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">new</span> List&lt;<span style="color: #0000ff;">int</span>&gt; { <span style="color: #800080;">1</span>, <span style="color: #800080;">2</span>, <span style="color: #800080;">3</span><span style="color: #000000;"> });
</span><span style="color: #008080;"> 8</span> <span style="color: #000000;">        }
</span><span style="color: #008080;"> 9</span> 
<span style="color: #008080;">10</span>         <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
<span style="color: #008080;">11</span>         <span style="color: #808080;">///</span><span style="color: #008000;"> ValueTuple
</span><span style="color: #008080;">12</span>         <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
<span style="color: #008080;">13</span>         <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;returns&gt;&lt;/returns&gt;</span>
<span style="color: #008080;">14</span>         <span style="color: #0000ff;">private</span> (<span style="color: #0000ff;">string</span>, List&lt;<span style="color: #0000ff;">int</span>&gt;<span style="color: #000000;">) GetValuesN()
</span><span style="color: #008080;">15</span> <span style="color: #000000;">        {
</span><span style="color: #008080;">16</span>             <span style="color: #0000ff;">return</span> (<span style="color: #800000;">"</span><span style="color: #800000;">C7</span><span style="color: #800000;">"</span>, <span style="color: #0000ff;">new</span> List&lt;<span style="color: #0000ff;">int</span>&gt; { <span style="color: #800080;">1</span>, <span style="color: #800080;">2</span>, <span style="color: #800080;">3</span><span style="color: #000000;"> });
</span><span style="color: #008080;">17</span>         }</pre>
</div>
<p>Tuple的示例中，代码声明了一个Tuple元组，内存在托管堆上统一管理，GC垃圾回收在指定时机下回收。</p>
<p>ValueTuple示例中，编译器生成的代码使用的是ValueTuple，其本身就是一个struct，在栈上创建，这使我们既可以访问这个返回值数据，同时确保在包含的数据结构上不需要做垃圾回收。</p>
<p>我们通过IL Spy看下编译后的代码：</p>
<p><img src="https://img2018.cnblogs.com/blog/23525/201903/23525-20190324172515656-2053249716.jpg" alt="" /></p>
<p>上图可以看到：</p>
<p>第一个方法GetValues，返回class [System.Runtime]System.Tuple`2&lt;string, class [System.Collections]System.Collections.Generic.List`1&lt;int32&gt;&gt;，一个类的实例&nbsp;</p>
<p>第二个方法GetValuesN，返回valuetype [System.Runtime]System.ValueTuple`2&lt;string, class [System.Collections]System.Collections.Generic.List`1&lt;int32&gt;&gt;，一个值类型的实例。</p>
<p>类是在托管堆中分配的 (由 CLR 跟踪和管理，并受垃圾收集的管制，是可变的)，而值类型分配在堆栈上 (速度快且较少的开销，是不可变的)。</p>
<p><strong>System.ValueTuple 本身并没有被 CLR 跟踪，它只是作为我们使用的嵌入值的一个简单容器。</strong></p>
<p>ValueTuple&lt;T&gt;作为C#7.0支持方法多返回值，的确在底层实现上考虑了性能表现（内存），同时编码上给我们带来了更愉快的语法特性！</p>
<p><span style="font-size: 16px;"><strong>二、从字符串操作看Span&lt;T&gt;</strong></span></p>
<p>大多数.Net开发场景，只使用到了托管堆（由CLR统一管理），其实.Net 有三种类型的内存可以使用，不过要看具体的使用场景。</p>
<ul>
<li>栈内存：我们通常分配的值类型的内存空间，比如 int, double, bool，&hellip;&hellip;它非常快 (通常在 CPU 的缓存中使用)，但大小有限 (通常小于 1 MB)。当然，有些开发人员会使用 stackalloc 关键字添加自定义对象，但要知道它们是有危险性的，因为在任何时间都可能发生 StackOverflowException，使我们的整个应用程序崩溃。</li>
<li>非托管内存：没有垃圾收集器的内存空间，必须自己使用像 Marshal.AllocHGlobal 和 Marshal.FreeHGlobal 之类的方法预订和释放内存。</li>
<li>托管内存 / 托管堆：通过GC垃圾收集器释放已经不再使用的内存空间，使我们大多数人都过着无忧无虑的程序员生活，很少有内存问题。</li>
</ul>
<p>上述三种类型的内存，都有各自的优缺点，特点的使用场景。如果我们设计一个兼容支持上述三种类型的Lib，需要分别提供两种实现，一种是支持托管堆的，一种是支持栈和非托管内存的。比如说SubString。</p>
<p>我们先看第一种支持托管推的SubString实现：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span> <span style="color: #0000ff;">string</span> Substring(<span style="color: #0000ff;">string</span> source, <span style="color: #0000ff;">int</span> startIndex, <span style="color: #0000ff;">int</span><span style="color: #000000;"> length)
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">{
</span><span style="color: #008080;"> 3</span>             <span style="color: #0000ff;">var</span> result = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">char</span><span style="color: #000000;">[length];
</span><span style="color: #008080;"> 4</span>             <span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">var</span> i = <span style="color: #800080;">0</span>; i &lt; length; i++<span style="color: #000000;">)
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">            {
</span><span style="color: #008080;"> 6</span>                 result[i] = source[startIndex +<span style="color: #000000;"> i];
</span><span style="color: #008080;"> 7</span> <span style="color: #000000;">            }
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span>             <span style="color: #0000ff;">return</span> <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">string</span><span style="color: #000000;">(result);
</span><span style="color: #008080;">10</span> }</pre>
</div>
<p>上述方法内部声明了新的string对象和字符数组，这无疑带来了内存和CPU消息，实现的并不差，但是也不理想。</p>
<p>继续看第二种支持栈和非托管内存的，使用 char*(是的，一个指针!) 和字符串的长度，并返回类似的指向结果的指针。实现上就有点小复杂了。</p>
<p>此时，我们看.Net Core新引入的System.Memory命名空间下的Span&lt;T&gt;. 首先它是一个值类型 (因此没有被垃圾收集器跟踪)，它试图统一对任何底层内存类型的访问。看一下它的内部结构：</p>
<div class="cnblogs_code">
<pre>  <span style="color: #008000;">//</span><span style="color: #008000;"> Constructor for internal use only.</span>
<span style="color: #000000;">[MethodImpl(MethodImplOptions.AggressiveInlining)]
</span><span style="color: #0000ff;">internal</span> Span(<span style="color: #0000ff;">ref</span> T ptr, <span style="color: #0000ff;">int</span><span style="color: #000000;"> length)
{
            Debug.Assert(length </span>&gt;= <span style="color: #800080;">0</span><span style="color: #000000;">);

            _pointer </span>= <span style="color: #0000ff;">new</span> ByReference&lt;T&gt;(<span style="color: #0000ff;">ref</span><span style="color: #000000;"> ptr);
            _length </span>=<span style="color: #000000;"> length;
}

 </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">ref</span> T <span style="color: #0000ff;">this</span><span style="color: #000000;">[Index index]
{
            </span><span style="color: #0000ff;">get</span><span style="color: #000000;">
            {
                </span><span style="color: #008000;">//</span><span style="color: #008000;"> Evaluate the actual index first because it helps performance</span>
                <span style="color: #0000ff;">int</span> actualIndex =<span style="color: #000000;"> index.GetOffset(_length);
                </span><span style="color: #0000ff;">return</span> <span style="color: #0000ff;">ref</span> <span style="color: #0000ff;">this</span><span style="color: #000000;"> [actualIndex];
            }
}</span></pre>
</div>
<p>不管我们是使用字符串、char[] 甚至是未管理的 char* 来创建一个 Span&lt;T&gt;, Span&lt;T&gt; 对象都提供了相同的函数，比如返回索引中的元素。可以把它看作是 T[]，其中 T 可以是任何类型的内存。</p>
<p>我们用Span&lt;T&gt;编写一个 Substring() 方法</p>
<div class="cnblogs_code">
<pre>Span&lt;<span style="color: #0000ff;">char</span>&gt; SubString(Span&lt;<span style="color: #0000ff;">char</span>&gt; source, <span style="color: #0000ff;">int</span> startIndex, <span style="color: #0000ff;">int</span><span style="color: #000000;"> length)
 {
       </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> source.Slice(startIndex, length);
 }</span></pre>
</div>
<p>上述方法不返回源数据的副本，而是返回引用源的子集的 Span&lt;T&gt;，对比第一种SubString实现：<strong>没有重复数据，没有复制和复制数据的开销。</strong></p>
<p><strong>总结一下：</strong></p>
<p>.NetCore中通过引入诸如 System.ValueTuple and Span&lt;T&gt; 之类的类型，使. net 开发人员更自然地使用在运行时可用的不同类型的内存，同时避免与它们相关的常见缺陷。这种统一带来了性能提升的同时，也简化了我们日常的编码。</p>
<p>&nbsp;</p>
<p>周国庆</p>
<p>2019/3/24</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2019-03-24 18:10</span>&nbsp;
<a href="https://www.cnblogs.com/tianqing/">Eric zhou</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10589373" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(10589373);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 27084, cb_blogApp = 'tianqing', cb_blogUserGuid = 'ea753d0b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 10589373, cb_entryCreatedDate = '2019-03-24 18:10', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 Eric zhou
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    
</body>
</html>