<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="随着我们业务规模的不断增长，整个系统规模由两年前的几十台服务器，井喷到现在2个数据中心，接近400台服务器，上百个WebApi站点，上百个域名。 这么多的WebApi站点这么多的域名，管理和维护成本很" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Nginx技术研究系列1-通过应用场景看Nginx的反向代理 - Eric zhou - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=MH15aYd6DmX-6TABpA2xkiKENy3GAhiM2dh5rOPH89I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=X7swQJ1TyCJAf6FMVjDPbYhUAiMdNFddEy1-m0_TbFQ" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/tianqing/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/tianqing/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/tianqing/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 27084;
        var currentBlogApp = 'tianqing';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleBlue';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/tianqing/">I love .net</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/tianqing/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Eric%20zhou">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/tianqing/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
101&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
400</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/tianqing/p/7616735.html">Nginx技术研究系列1-通过应用场景看Nginx的反向代理</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>随着我们业务规模的不断增长，整个系统规模由两年前的几十台服务器，井喷到现在2个数据中心，接近400台服务器，上百个WebApi站点，上百个域名。</p>
<p>这么多的WebApi站点这么多的域名，管理和维护成本很高。</p>
<p>后续随着系统规模的继续扩张，必须实现域名的统一规划，使用Nginx实现请求的反向代理和动态路由。</p>
<p>从实际场景出发，看一看实际的场景是什么？</p>
<p>http://api.***.com/action =&gt; http://192.168.0.11/api/action<br />Header:	*** &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Header: ***<br />Body:	*** &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Body:   ***</p>
<p>根据请求的Action动态解析对应的内网服务器地址，再实现服务的转发。</p>
<p><strong>一、 工欲善其事必先利其器，先科普一下Nginx</strong></p>
<p>1. HTTP基础功能</p>
<ul>
<li>处理静态文件，索引文件以及自动索引； </li>
<li>反向代理加速(无缓存)，简单的负载均衡和容错； </li>
<li>FastCGI，简单的负载均衡和容错； </li>
<li>模块化的结构。过滤器包括gzipping, byte ranges, chunked responses, 以及 SSI-filter 。在SSI过滤器中，到同一个 proxy 或者 FastCGI 的多个子请求并发处理； </li>
<li>SSL 和 TLS SNI 支持； </li>
<li>基于IP 和名称的虚拟主机服务； </li>
<li>Memcached 的 GET 接口； </li>
<li>支持 keep-alive 和管道连接； </li>
<li>灵活简单的配置； </li>
<li> 重新配置和在线升级而无须中断客户的工作进程； </li>
<li> 可定制的访问日志，日志写入缓存，以及快捷的日志回卷； </li>
<li>4xx-5xx 错误代码重定向； </li>
<li> 基于 PCRE 的 rewrite 重写模块； </li>
<li> 基于客户端 IP 地址和 HTTP 基本认证的访问控制； </li>
<li>PUT, DELETE, 和 MKCOL 方法； </li>
<li> 支持 FLV （Flash 视频）； </li>
<li> 带宽限制；</li>






</ul>
<p>2. IMAP/POP3 代理服务功能</p>
<ul>
<li> 使用外部 HTTP 认证服务器重定向用户到 IMAP/POP3 后端； </li>
<li> 使用外部 HTTP 认证服务器认证用户后连接重定向到内部的 SMTP 后端； </li>
<li> 认证方法： </li>
<li>      POP3: POP3 USER/PASS, APOP, AUTH LOGIN PLAIN CRAM-MD5; </li>
<li>      IMAP: IMAP LOGIN; </li>
<li>      SMTP: AUTH LOGIN PLAIN CRAM-MD5; </li>
<li> SSL 支持； </li>
<li> 在 IMAP 和 POP3 模式下的 STARTTLS 和 STLS 支持；</li>






</ul>
<p>3. 支持的操作系统 </p>
<ul>
<li> FreeBSD 3.x, 4.x, 5.x, 6.x i386; FreeBSD 5.x, 6.x amd64; </li>
<li> Linux 2.2, 2.4, 2.6 i386; Linux 2.6 amd64; </li>
<li> Solaris 8 i386; Solaris 9 i386 and sun4u; Solaris 10 i386; </li>
<li> MacOS X (10.4) PPC; </li>






</ul>
<p><strong>二、Nginx的核心应用场景</strong></p>
<p>1. 作为 Web 服务器：相比 Apache，Nginx 使用更少的资源，支持更多的并发连接，体现更高的效率，这点使 Nginx 尤其受到虚拟主机提供商的欢迎。能够支持高达 50,000 个并发连接数的响应，Nginx 为选择了 epoll and kqueue 作为开发模型.<br />2. 作为负载均衡服务器：Nginx 既可以在内部直接支持 Rails 和 PHP，也可以支持作为 HTTP代理服务器 对外进行服务。Nginx 用 C 编写, 不论是系统资源开销还是 CPU 使用效率都比 Perlbal 要好的多。<br />作为邮件代理服务器: Nginx 同时也是一个非常优秀的邮件代理服务器</p>
<p>3. Nginx 安装简单，配置文件非常简洁（还能够支持perl语法），Bugs非常少的服务器: Nginx 启动特别容易，并且几乎可以做到7*24不间断运行，即使运行数个月也不需要重新启动。支持不间断服务的情况下进行软件版本的升级。</p>
<p>我们对Nginix的实际应用场景：</p>
<p>我们迁移.Net Core之后，前端使用Vue，我们将使用Nginx作为反向代理服务器和Http服务器</p>
<p>WebApi站点反向代理用</p>
<p><strong>三、CentOS下安装部署Nginx</strong></p>
<p>1. 安装Make</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">yum</span> -y <span style="color: #0000ff;">install</span> <span style="color: #0000ff;">gcc</span> automake autoconf libtool <span style="color: #0000ff;">make</span></pre>
</div>
<p>2. 安装g++</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">yum</span> <span style="color: #0000ff;">install</span> <span style="color: #0000ff;">gcc</span> <span style="color: #0000ff;">gcc</span>-c++</pre>
</div>
<p>3. 安装PCRE库</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">wget</span> <span style="color: #0000ff;">ftp</span>:<span style="color: #008000;">//</span><span style="color: #008000;">ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz </span>
<span style="color: #0000ff;">tar</span> -zxvf pcre-<span style="color: #800080;">8.38</span>.<span style="color: #0000ff;">tar</span><span style="color: #000000;">.gz
cd pcre</span>-<span style="color: #800080;">8.34</span><span style="color: #000000;">
.</span>/<span style="color: #000000;">configure
</span><span style="color: #0000ff;">make</span>
<span style="color: #0000ff;">make</span> <span style="color: #0000ff;">install</span></pre>
</div>
<p>4. 安装Zlib</p>
<div class="cnblogs_code">
<pre>cd /usr/local/<span style="color: #000000;">src
</span><span style="color: #0000ff;">wget</span> http:<span style="color: #008000;">//</span><span style="color: #008000;">zlib.net/zlib-1.2.11.tar.gz</span>
<span style="color: #0000ff;">tar</span> -zxvf zlib-<span style="color: #800080;">1.2</span>.<span style="color: #800080;">11</span>.<span style="color: #0000ff;">tar</span><span style="color: #000000;">.gz
cd zlib</span>-<span style="color: #800080;">1.2</span>.<span style="color: #800080;">8</span><span style="color: #000000;">
.</span>/<span style="color: #000000;">configure
</span><span style="color: #0000ff;">make</span>
<span style="color: #0000ff;">make</span> <span style="color: #0000ff;">install</span></pre>
</div>
<p>5. 下载解压SSL</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">wget</span> https:<span style="color: #008000;">//</span><span style="color: #008000;">www.openssl.org/source/openssl-1.0.2l.tar.gz</span>
<span style="color: #0000ff;">tar</span> -zxvf openssl-<span style="color: #800080;">1.0</span>.<span style="color: #800080;">2l</span>.<span style="color: #0000ff;">tar</span>.gz</pre>
</div>
<p>6. 安装Nginx</p>
<div class="cnblogs_code">
<pre>cd /usr/local/<span style="color: #000000;">src
</span><span style="color: #0000ff;">wget</span> http:<span style="color: #008000;">//</span><span style="color: #008000;">nginx.org/download/nginx-1.4.2.tar.gz</span>
<span style="color: #000000;">
cd nginx</span>-<span style="color: #800080;">1.4</span>.<span style="color: #800080;">2</span><span style="color: #000000;">
.</span>/configure --sbin-path=/usr/local/nginx/<span style="color: #000000;">nginx \
</span>--conf-path=/usr/local/nginx/<span style="color: #000000;">nginx.conf \
</span>--pid-path=/usr/local/nginx/<span style="color: #000000;">nginx.pid \
</span>--with-<span style="color: #000000;">http_ssl_module \
</span>--with-pcre=/opt/app/openet/oetal1/chenhe/pcre-<span style="color: #800080;">8.37</span><span style="color: #000000;"> \
</span>--with-zlib=/opt/app/openet/oetal1/chenhe/zlib-<span style="color: #800080;">1.2</span>.<span style="color: #800080;">8</span><span style="color: #000000;"> \
</span>--with-openssl=/opt/app/openet/oetal1/chenhe/openssl-<span style="color: #800080;">1.0</span><span style="color: #000000;">.1t
</span><span style="color: #0000ff;">make</span>
<span style="color: #0000ff;">make</span> <span style="color: #0000ff;">install</span></pre>
</div>
<p>7. 启动Nginx，使用默认的Nginx.Conf文件</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">sudo</span> /usr/local/nginx/nginx</pre>
</div>
<p>&nbsp;<strong>四、 Nginx反向代理设置</strong></p>
<p>在设置Nginx反向代理之前，我们需要谨慎的规划URL的使用！！！<br />为后续的业务扩展、水平伸缩打好基础，否则杂乱无章的URL使用，会导致路由配置极其复杂难用。<br />先看Nginx的HTTP负载均衡的标准配置：</p>
<p><img src="https://images2017.cnblogs.com/blog/23525/201710/23525-20171001095223887-63422458.png" alt="" /></p>
<p>Nginx中location对url匹配；</p>
<p>语法：location [=|~|~*|^~] /uri/ { &hellip; }</p>
<p>当匹配中符合条件的location，则执行内部指令；</p>
<p>如果使用正则表达式，必须使用~*表明不区分大小写或者~区分大小写匹配；</p>
<p>当匹配成功后，将停止往下匹配；如果没有找到，则使用常规自字符串处理结果；</p>
<ul>
<li>=开头表示精确匹配</li>
<li>^~ 开头表示uri以某个常规字符串开头，不是正则匹配</li>
<li>~ 开头表示区分大小写的正则匹配;</li>
<li>~* 开头表示不区分大小写的正则匹配</li>
<li>/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到</li>




</ul>
<p>举个示例：</p>
<p><img src="https://images2017.cnblogs.com/blog/23525/201710/23525-20171001095412247-1815464000.png" alt="" /></p>
<p>把xxx123.tk域名指向静态IP，这样就实现了在浏览器中<br />输入xxx123.tk访问192.168.10.38的3000端口,<br />输入xxx456.tk访问192.168.10.40的80端口的作用。</p>
<p>同时，示例一个Nginx负载均衡配置</p>
<p><img src="https://images2017.cnblogs.com/blog/23525/201710/23525-20171001095544809-579587422.png" alt="" /></p>
<p>五、Nginx动态路由</p>
<p>在Nginx的设计中，每一个upstream维护了一张静态路由表，存储了backend的ip、port以及其他的meta信息。</p>
<p>每次请求到达后，会依据location检索路由表，然后依据具体的调度算法(如round robin )选择一个backend转发请求。</p>
<p>但这张路由表是静态的，如果变更后，则必须reload，经常reload的话这对SLA有较大影响。</p>
<p>为了达到减少reload的目的，大多通过动态更新维护路由表来解决这个问题。</p>
<p>各种google、百度之后，找到了几个线索：Nginx、Lua、Redis</p>
<p>然后又发现了新大陆OpenResty：</p>
<p>OpenResty 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p>
<p><img src="https://images2017.cnblogs.com/blog/23525/201710/23525-20171001100942356-522183152.png" alt="" /></p>
<p>下面几篇文章，我们继续研究上面这个新大陆。</p>
<p>&nbsp;</p>
<p>周国庆</p>
<p>2017/10/1</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2017-10-01 10:11</span>&nbsp;
<a href="https://www.cnblogs.com/tianqing/">Eric zhou</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=7616735" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(7616735);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 27084, cb_blogApp = 'tianqing', cb_blogUserGuid = 'ea753d0b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 7616735, cb_entryCreatedDate = '2017-10-01 10:11', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 Eric zhou
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    
</body>
</html>