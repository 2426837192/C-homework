<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="上篇博文中我们介绍了Azure Messaging的重复消息机制、At most once 和At least once. Azure Messaging-ServiceBus Messaging消息" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Azure Messaging-ServiceBus Messaging消息队列技术系列6-消息回执 - Eric zhou - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=MH15aYd6DmX-6TABpA2xkiKENy3GAhiM2dh5rOPH89I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=X7swQJ1TyCJAf6FMVjDPbYhUAiMdNFddEy1-m0_TbFQ" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/tianqing/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/tianqing/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/tianqing/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 27084;
        var currentBlogApp = 'tianqing';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleBlue';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/tianqing/">I love .net</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/tianqing/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Eric%20zhou">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/tianqing/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
101&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
400</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/tianqing/p/6607682.html">Azure Messaging-ServiceBus Messaging消息队列技术系列6-消息回执</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>上篇博文中我们介绍了Azure Messaging的重复消息机制、At most once 和At least once.</p>
<p><a href="http://www.cnblogs.com/tianqing/p/6561635.html" target="_blank">&nbsp;Azure Messaging-ServiceBus Messaging消息队列技术系列5-重复消息：at-least-once at-most-once</a></p>
<p>本文中我们主要研究并介绍Azure Messaging的消息回执机制：实际应用场景：</p>
<p>同步收发场景下，<strong>消息生产者和消费者双向应答模式</strong>，例如：张三写封信送到邮局中转站，然后李四从中转站获得信，然后在写一份回执信，放到中转站，然后张三去取，当然张三写信的时候就得写明回信地址。还</p>
<p>有，生成订单编号场景，发送一个生成订单编号的消息，消息消费者接收生成订单编号的消息，并通过消息回执返回。</p>
<p>Azure Messaging的消息回执机制主要通过：基于带<strong>会话</strong>的Queue/Topic、<strong>SessionId、ReplyTo</strong>属性来实现</p>
<p>在代码实现中，我们需要：</p>
<p>1. 两个工作线程，一个线程用于消息发送和接收回执消息，一个线程用于消息接收和发送消息回执。</p>
<p>2. 一个会话标识：ReceiptSession　　</p>
<p>3. 两个队列Queue：RequestQueue：发送消息、接收消息，ResponseQueue：发送回执消息，接收回执消息。</p>
<p>直接Show Code：</p>
<p>首先，我们在ServiceBusMQManager增加一个线程安全的创建带回话的QueueClient方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">object</span> syncObj = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">object</span><span style="color: #000000;">();
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 获取要求会话带Session的QueueClient
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name="queueName"&gt;</span><span style="color: #008000;">队列名称</span><span style="color: #808080;">&lt;/param&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;returns&gt;</span><span style="color: #008000;">QueueClient</span><span style="color: #808080;">&lt;/returns&gt;</span>
        <span style="color: #0000ff;">public</span> QueueClient GetSessionQueueClient(<span style="color: #0000ff;">string</span><span style="color: #000000;"> queueName)
        {
            </span><span style="color: #0000ff;">var</span> namespaceClient =<span style="color: #000000;"> NamespaceManager.Create();
            </span><span style="color: #0000ff;">if</span> (!<span style="color: #000000;">namespaceClient.QueueExists(queueName))
            {
                </span><span style="color: #0000ff;">lock</span><span style="color: #000000;"> (<strong>syncObj</strong>)
                {
                    </span><span style="color: #0000ff;">if</span> (!<span style="color: #000000;">namespaceClient.QueueExists(queueName))
                    {
                        </span><span style="color: #0000ff;">var</span> queue = <span style="color: #0000ff;">new</span> QueueDescription(queueName) { <strong>RequiresSession</strong> = <strong><span style="color: #0000ff;">true</span></strong><span style="color: #000000;"> };
                        namespaceClient.CreateQueue(queue);
                    }
                }
            }

            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> QueueClient.Create(queueName, ReceiveMode.ReceiveAndDelete);
        }</span></pre>
</div>
<p>然后我们定义一些常量：</p>
<div class="cnblogs_code">
<pre>        <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> <span style="color: #0000ff;">string</span> ReplyToSessionId = <span style="color: #800000;">"</span><span style="color: #800000;">ReceiptSession</span><span style="color: #800000;">"</span><span style="color: #000000;">;

        </span><span style="color: #0000ff;">const</span> <span style="color: #0000ff;">double</span> ResponseMessageTimeout = <span style="color: #800080;">20.0</span><span style="color: #000000;">;

        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> <span style="color: #0000ff;">string</span> requestQueueName = <span style="color: #800000;">"</span><span style="color: #800000;">RequestQueue</span><span style="color: #800000;">"</span><span style="color: #000000;">;

        </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">readonly</span> <span style="color: #0000ff;">string</span> responseQueueName = <span style="color: #800000;">"</span><span style="color: #800000;">ResponseQueue</span><span style="color: #800000;">"</span>;</pre>
</div>
<p>实现发送并接收回执消息的方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #808080;">        ///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 发送并接收回执消息
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name="bills"&gt;&lt;/param&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> SendMessage()
        {
            </span><span style="color: #0000ff;">var</span> manager = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ServiceBusUtils();
            </span><span style="color: #0000ff;">var</span> responseClient =<span style="color: #000000;"> manager.GetSessionQueueClient(<strong>responseQueueName</strong>);
            </span><span style="color: #0000ff;">var</span> requestClient =<span style="color: #000000;"> manager.GetSessionQueueClient(<strong>requestQueueName</strong>);

            </span><span style="color: #0000ff;">var</span> messsageReceiver =<span style="color: #000000;"> responseClient.AcceptMessageSession(ReplyToSessionId);
            </span><span style="color: #0000ff;">var</span> order = CreateSalesOrder(<span style="color: #800080;">1</span><span style="color: #000000;">);

            </span><span style="color: #008000;">//</span><span style="color: #008000;">发送消息</span>
            <span style="color: #0000ff;">var</span> message = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BrokeredMessage(order);
            message.Properties.Add(</span><span style="color: #800000;">"</span><span style="color: #800000;">Type</span><span style="color: #800000;">"</span><span style="color: #000000;">, order.GetType().ToString());
            message.<strong>SessionId </strong></span>=<span style="color: #000000;"><strong> ReplyToSessionId</strong>;
            message.MessageId </span>= <span style="color: #800000;">"</span><span style="color: #800000;">OrderMessage001</span><span style="color: #800000;">"</span><span style="color: #000000;">;
            message.<strong>ReplyTo</strong> </span>=<span style="color: #000000;"><strong> responseQueueName</strong>;
            requestClient.Send(message);
            Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">Send message: </span><span style="color: #800000;">"</span> + message.MessageId + <span style="color: #800000;">"</span><span style="color: #800000;">, SalesOrder ID: </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> order.OrderID);

            </span><span style="color: #008000;">//</span><span style="color: #008000;">接收消息回执</span>
            <span style="color: #0000ff;">var</span> receivedMessage = messsageReceiver.Receive(TimeSpan.FromSeconds(ResponseMessageTimeout * <span style="color: #800080;">2</span><span style="color: #000000;">));

            </span><span style="color: #0000ff;">var</span> receivedOrder = receivedMessage.GetBody&lt;SalesOrder&gt;<span style="color: #000000;">();
            Console.WriteLine(</span><span style="color: #800000;">"</span><span style="color: #800000;">Receive receipt message: </span><span style="color: #800000;">"</span> + receivedMessage.MessageId + <span style="color: #800000;">"</span><span style="color: #800000;">, SalesOrder ID: </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> receivedOrder.OrderID);
            messsageReceiver.Close();
        }</span></pre>
</div>
<p>实现接收消息并发送回执方法：</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1        </span> <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
<span style="color: #008080;"> 2</span>         <span style="color: #808080;">///</span><span style="color: #008000;"> 接收消息并回执
</span><span style="color: #008080;"> 3</span>         <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
<span style="color: #008080;"> 4</span>         <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> ReceiveMessage()
</span><span style="color: #008080;"> 5</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 6</span>             <span style="color: #0000ff;">var</span> manager = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ServiceBusUtils();
</span><span style="color: #008080;"> 7</span> 
<span style="color: #008080;"> 8</span>             <span style="color: #0000ff;">var</span> requestClient =<span style="color: #000000;"> manager.GetSessionQueueClient(requestQueueName);
</span><span style="color: #008080;"> 9</span>             <span style="color: #0000ff;">var</span> session =<span style="color: #000000;"> requestClient.AcceptMessageSession();
</span><span style="color: #008080;">10</span>             <span style="color: #0000ff;">var</span> requestMessage =<span style="color: #000000;"> session.Receive();
</span><span style="color: #008080;">11</span>            
<span style="color: #008080;">12</span>             <span style="color: #0000ff;">if</span> (requestMessage != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
</span><span style="color: #008080;">13</span> <span style="color: #000000;">            {
</span><span style="color: #008080;">14</span>                 <span style="color: #0000ff;">var</span> receivedOrder = requestMessage.GetBody&lt;SalesOrder&gt;<span style="color: #000000;">();
</span><span style="color: #008080;">15</span>                 Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">Receive message: </span><span style="color: #800000;">"</span> + requestMessage.MessageId + <span style="color: #800000;">"</span><span style="color: #800000;">, SalesOrder ID: </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> receivedOrder.OrderID);
</span><span style="color: #008080;">16</span> 
<span style="color: #008080;">17</span>                 <span style="color: #0000ff;">var</span> responseMessage = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BrokeredMessage(receivedOrder);
</span><span style="color: #008080;">18</span>                 responseMessage.Properties.Add(<span style="color: #800000;">"</span><span style="color: #800000;">Type</span><span style="color: #800000;">"</span><span style="color: #000000;">, receivedOrder.GetType().ToString());
</span><span style="color: #008080;">19</span>                 responseMessage.ReplyToSessionId =<span style="color: #000000;"> ReplyToSessionId;
</span><span style="color: #008080;">20</span>                 responseMessage.MessageId = <span style="color: #800000;">"</span><span style="color: #800000;">ResponseOrderMessage001</span><span style="color: #800000;">"</span><span style="color: #000000;">;
</span><span style="color: #008080;">21</span>                 responseMessage.SessionId =<span style="color: #000000;"> requestMessage.SessionId;
</span><span style="color: #008080;">22</span>                
<span style="color: #008080;">23</span>                 <span style="color: #008000;">//</span><span style="color: #008000;">发送回执消息</span>
<span style="color: #008080;">24</span>                 <span style="color: #0000ff;">var</span> responseClient =<span style="color: #000000;"> manager.GetSessionQueueClient(requestMessage.ReplyTo);
</span><span style="color: #008080;">25</span> <span style="color: #000000;">                responseClient.Send(responseMessage);
</span><span style="color: #008080;">26</span>                 Console.WriteLine(<span style="color: #800000;">"</span><span style="color: #800000;">Send receipt message: </span><span style="color: #800000;">"</span> + responseMessage.MessageId + <span style="color: #800000;">"</span><span style="color: #800000;">, SalesOrder ID: </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> receivedOrder.OrderID);               
</span><span style="color: #008080;">27</span> <span style="color: #000000;">            }
</span><span style="color: #008080;">28</span>         }</pre>
</div>
<p>Main方法中，启动两个工作线程：一个线程用于消息发送和接收回执消息，一个线程用于消息接收和发送消息回执。</p>
<p>因为涉及到Azure Messaging中队列的第一次创建，<strong>Azure Messaging是不支持多个请求同时创建同一个队列</strong>的，因此，我们两个线程间做一个简单的Task.Delay(3000).Wait();</p>
<div class="cnblogs_code">
<pre><span style="color: #008080;"> 1</span>         <span style="color: #0000ff;">static</span> <span style="color: #0000ff;">void</span> Main(<span style="color: #0000ff;">string</span><span style="color: #000000;">[] args)
</span><span style="color: #008080;"> 2</span> <span style="color: #000000;">        {
</span><span style="color: #008080;"> 3</span>             <span style="color: #0000ff;">var</span> sendTask = Task.Factory.StartNew(() =&gt;<span style="color: #000000;"> { SendMessage(); });
</span><span style="color: #008080;"> 4</span>             Task.Delay(<span style="color: #800080;">3000</span><span style="color: #000000;">).Wait();
</span><span style="color: #008080;"> 5</span>             <span style="color: #0000ff;">var</span> receiveTask = Task.Factory.StartNew(() =&gt;<span style="color: #000000;"> { ReceiveMessage(); });
</span><span style="color: #008080;"> 6</span> 
<span style="color: #008080;"> 7</span> <span style="color: #000000;">            Task.WaitAll(sendTask, receiveTask);
</span><span style="color: #008080;"> 8</span> 
<span style="color: #008080;"> 9</span> <span style="color: #000000;">            Console.ReadKey();           
</span><span style="color: #008080;">10</span>         }</pre>
</div>
<p>我们看看程序输出：<br /><br /></p>
<p><img src="https://images2015.cnblogs.com/blog/23525/201703/23525-20170323223828846-437106799.png" alt="" /></p>
<p>Azure 服务总线中的队列：</p>
<p><img src="https://images2015.cnblogs.com/blog/23525/201703/23525-20170323224045486-1852604385.png" alt="" /></p>
<p>可以看出：Azure Messaging-ServiceBus Messaging&nbsp;基于带<strong>会话</strong>的Queue/Topic、<strong>SessionId、ReplyTo</strong>属性来实现消息回执机制。</p>
<p>&nbsp;</p>
<p>周国庆</p>
<p>2017/3/23</p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2017-03-23 22:43</span>&nbsp;
<a href="https://www.cnblogs.com/tianqing/">Eric zhou</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=6607682" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(6607682);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 27084, cb_blogApp = 'tianqing', cb_blogUserGuid = 'ea753d0b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 6607682, cb_entryCreatedDate = '2017-03-23 22:43', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 Eric zhou
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    
</body>
</html>