<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="各位，上一篇基本概念和架构中，我们介绍了Window Azure ServiceBus的消息队列技术的概览。接下来，我们进入编程模式和详细功能介绍模式，一点一点把ServiceBus技术研究出来。 本" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Azure Messaging-ServiceBus Messaging消息队列技术系列2-编程SDK入门 - Eric zhou - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=MH15aYd6DmX-6TABpA2xkiKENy3GAhiM2dh5rOPH89I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=X7swQJ1TyCJAf6FMVjDPbYhUAiMdNFddEy1-m0_TbFQ" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/tianqing/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/tianqing/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/tianqing/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 27084;
        var currentBlogApp = 'tianqing';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleBlue';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/tianqing/">I love .net</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/tianqing/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Eric%20zhou">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/tianqing/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
101&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
400</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/tianqing/p/5944573.html">Azure Messaging-ServiceBus Messaging消息队列技术系列2-编程SDK入门</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>各位，上一篇基本概念和架构中，我们介绍了Window Azure ServiceBus的消息队列技术的概览。接下来，我们进入编程模式和详细功能介绍模式，一点一点把ServiceBus技术研究出来。</p>
<p>本章我们主要介绍ServiceBus的编程SDK编程入门。</p>
<p>首先，微软提供了两个主要的Nuget Packages：</p>
<p>Microsoft Azure Service Bus 3.4.0</p>
<p>主要的NameSpace有以下几个：</p>
<p>1.　Microsoft.ServiceBus，这个下面有两个主要的类：TokenProvider（用于创建Azure ServiceBus连接Token）NamespaceManager（管理ServiceBus的命名空间）。</p>
<p>2.　Microsoft.ServiceBus.Messaging，这个命名空间下面主要提供了：MessageSession、BrokeredMessage、QueueClient、TopicClient、TopicDescription、QueueDescription、SubscriptionClient、SubscriptionDescription等核心类。</p>
<p>在正式编码之前，需要我们在Windows Azure的Portal上建立ServiceBus的NameSpace：</p>
<p>&nbsp;<img src="https://images2015.cnblogs.com/blog/23525/201610/23525-20161010114008274-862680401.png" alt="" /></p>
<p>我们新建一个命名空间：servicebustest，选择的类型是：消息</p>
<p><img src="https://images2015.cnblogs.com/blog/23525/201610/23525-20161010114035368-946526904.png" alt="" /></p>
<p>新建完成后处于活动（可用）的状态：</p>
<p><img src="https://images2015.cnblogs.com/blog/23525/201610/23525-20161010114133227-1948305779.png" alt="" /></p>
<p>接下来，我们要获取两个重要的配置：连接串和主秘钥</p>
<p><img src="https://images2015.cnblogs.com/blog/23525/201610/23525-20161010114236852-525704907.png" alt="" /></p>
<p><img src="https://images2015.cnblogs.com/blog/23525/201610/23525-20161010114251352-221880481.png" alt="" /></p>
<p>请将连接字符串拷贝下来，备用。</p>
<p><img src="https://images2015.cnblogs.com/blog/23525/201610/23525-20161010114431571-803309492.png" alt="" /></p>
<p>请将主秘钥拷贝下来，备用。</p>
<p>启动我们的ServiceBus的连接编码，首先需要在应用程序配置文件中增加ServiceBus的连接信息:</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">&lt;</span><span style="color: #800000;">appSettings</span><span style="color: #0000ff;">&gt;</span>
    <span style="color: #008000;">&lt;!--</span><span style="color: #008000;"> Service Bus specific app setings for messaging connections </span><span style="color: #008000;">--&gt;</span>
    <span style="color: #0000ff;">&lt;</span><span style="color: #800000;">add </span><span style="color: #ff0000;">key</span><span style="color: #0000ff;">="Microsoft.ServiceBus.ConnectionString"</span><span style="color: #ff0000;"> value</span><span style="color: #0000ff;">="Endpoint=sb://servicebustest.servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=主秘钥"</span><span style="color: #0000ff;">/&gt;</span>
  <span style="color: #0000ff;">&lt;/</span><span style="color: #800000;">appSettings</span><span style="color: #0000ff;">&gt;</span></pre>
</div>
<p>后续，所有的ServiceBus的连接操作，都会读取这个配置节。我们通过case by case的方式，show 给大家：</p>
<p>首先：ServiceBus的命名空间管理器：<strong>Microsoft.ServiceBus.NamespaceManager</strong></p>
<p>这里，我们主要用以下两个方法来实例化：</p>
<p>public static NamespaceManager Create(); 例如：</p>
<div class="cnblogs_code">
<pre><span style="color: #0000ff;">var</span> namespaceClient = NamespaceManager.Create();</pre>
</div>
<p>通过NamespaceManager这个类，我们可以创建、删除、获取、重命名、更新、判断是否存在：队列、主题、订阅、规则等</p>
<p>1. 消息队列的创建、是否存在判断、删除操作</p>
<div class="cnblogs_code">
<pre>  <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> CreateQueue(<span style="color: #0000ff;">string</span> queueName, <span style="color: #0000ff;">bool</span> isRequiresSession = <span style="color: #0000ff;">true</span><span style="color: #000000;">)
        {
            </span><span style="color: #0000ff;">var</span> nm =<span style="color: #000000;"> NamespaceManager.Create();
            </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (nm.QueueExists(queueName))
            {
                nm.DeleteQueue(queueName);
            }

            </span><span style="color: #0000ff;">var</span> queue = <span style="color: #0000ff;">new</span> QueueDescription(queueName) { RequiresSession =<span style="color: #000000;"> isRequiresSession };
            nm.CreateQueue(queue);

            nm.DeleteQueue(queueName);
        }</span></pre>
</div>
<p>2. 创建QueueClient，用于发送、接收消息</p>
<div class="cnblogs_code">
<pre>        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 创建队列客户端
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;returns&gt;</span><span style="color: #008000;">队列客户端</span><span style="color: #808080;">&lt;/returns&gt;</span>
        <span style="color: #0000ff;">public</span> QueueClient CreateQueueClient(<span style="color: #0000ff;">string</span> queueName, ReceiveMode mode =<span style="color: #000000;"> ReceiveMode.ReceiveAndDelete)
        {
            </span><span style="color: #0000ff;">var</span> namespaceClient =<span style="color: #000000;"> NamespaceManager.Create();
            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> QueueClient.Create(queueName,mode);
        }</span></pre>
</div>
<p>3. 主题的创建、删除、是否存在判断</p>
<div class="cnblogs_code">
<pre> <span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> CreateTopic(<span style="color: #0000ff;">string</span><span style="color: #000000;"> topicName)
        {
            </span><span style="color: #0000ff;">var</span> nm =<span style="color: #000000;"> NamespaceManager.Create();
            </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (nm.TopicExists(topicName))
            {
                nm.DeleteTopic(topicName);
            }

            </span><span style="color: #0000ff;">var</span> topic = <span style="color: #0000ff;">new</span><span style="color: #000000;"> TopicDescription(topicName);
            nm.CreateTopic(topic);

            nm.DeleteTopic(topicName);
        }</span></pre>
</div>
<p>4. 创建TopicClient，用于主题的发送和订阅接收消息</p>
<div class="cnblogs_code">
<pre> <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 创建主题客户端
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;returns&gt;</span><span style="color: #008000;">主题客户端</span><span style="color: #808080;">&lt;/returns&gt;</span>
        <span style="color: #0000ff;">public</span> TopicClient GetTopicClient(<span style="color: #0000ff;">string</span><span style="color: #000000;"> topicName)
        {
            </span><span style="color: #0000ff;">var</span> namespaceClient =<span style="color: #000000;"> NamespaceManager.Create();            
            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> TopicClient.Create(topicName);
        }</span></pre>
</div>
<p>5. 创建消息BrokeredMessage，设置消息的属性</p>
<div class="cnblogs_code">
<pre>   <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 构造消息
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name="serializableObject"&gt;</span><span style="color: #008000;">可序列化的对象</span><span style="color: #808080;">&lt;/param&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;returns&gt;</span><span style="color: #008000;">消息</span><span style="color: #808080;">&lt;/returns&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> BrokeredMessage Create(Object serializableObject)
        {            
            </span><span style="color: #0000ff;">var</span> serializer = <span style="color: #0000ff;">new</span> DataContractSerializer(serializableObject.GetType(),<span style="color: #0000ff;">new</span> DataContractSerializerSettings(){ IgnoreExtensionDataObject = <span style="color: #0000ff;">true</span>, PreserveObjectReferences = <span style="color: #0000ff;">false</span><span style="color: #000000;">});
            </span><span style="color: #0000ff;">var</span> message = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BrokeredMessage(serializableObject);              
            message.Properties.Add(</span><span style="color: #800000;">"</span><span style="color: #800000;">Type</span><span style="color: #800000;">"</span><span style="color: #000000;">, serializableObject.GetType().ToString());

            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> message;
        }</span></pre>
</div>
<p>6.发送消息</p>
<div class="cnblogs_code">
<pre><span style="color: #808080;">        ///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 发送多条消息
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;param name="receivePayBills"&gt;</span><span style="color: #008000;">收发货订单集合</span><span style="color: #808080;">&lt;/param&gt;</span>
        <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> Send(List&lt;ReceivePayBill&gt;<span style="color: #000000;"> receivePayBills)
        {
            </span><span style="color: #0000ff;">var</span> queueClient = <span style="color: #000000;">GetQueueClient(queueName);
            </span><span style="color: #0000ff;">foreach</span> (<span style="color: #0000ff;">var</span> receivePayBill <span style="color: #0000ff;">in</span><span style="color: #000000;"> receivePayBills)
            {
                </span><span style="color: #0000ff;">var</span> message =<span style="color: #000000;"> this.Create(receivePayBill);
                queueClient.Send(message);
            }
            
            queueClient.Close();
        }</span></pre>
</div>
<p>7. 接收消息</p>
<div class="cnblogs_code">
<pre><span style="color: #808080;">        ///</span> <span style="color: #808080;">&lt;summary&gt;</span>
        <span style="color: #808080;">///</span><span style="color: #008000;"> 接收消息
        </span><span style="color: #808080;">///</span> <span style="color: #808080;">&lt;/summary&gt;</span>
        <span style="color: #808080;">///</span> <span style="color: #808080;">&lt;returns&gt;</span><span style="color: #008000;">收付款订单</span><span style="color: #808080;">&lt;/returns&gt;</span>
        <span style="color: #0000ff;">public</span> List&lt;ReceivePayBill&gt;<span style="color: #000000;"> Receive()
        {
            </span><span style="color: #0000ff;">var</span> bills = <span style="color: #0000ff;">new</span> List&lt;ReceivePayBill&gt;(<span style="color: #800080;">2</span><span style="color: #000000;">);
            </span><span style="color: #0000ff;">var</span> queueClient =<span style="color: #000000;"> GetReceiveQueueClient(queueName, ReceiveMode.ReceiveAndDelete);
            BrokeredMessage message;
            </span><span style="color: #0000ff;">while</span> ((message = queueClient.Receive()) != <span style="color: #0000ff;">null</span><span style="color: #000000;">)
            {
                bills.Add(message.GetBody</span>&lt;ReceivePayBill&gt;<span style="color: #000000;">());
            }

            </span><span style="color: #0000ff;">return</span><span style="color: #000000;"> bills;
        }</span></pre>
</div>
<p><br />还有很多其他的示例代码。本文只是一个简单的入门级教程，接下来我们将按MQ场景逐个展示ServiceBus Messaging的特性。</p>
<p>&nbsp;</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2016-12-27 18:49</span>&nbsp;
<a href="https://www.cnblogs.com/tianqing/">Eric zhou</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=5944573" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(5944573);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 27084, cb_blogApp = 'tianqing', cb_blogUserGuid = 'ea753d0b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 5944573, cb_entryCreatedDate = '2016-12-27 18:49', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 Eric zhou
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    
</body>
</html>