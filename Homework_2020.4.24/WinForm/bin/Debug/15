<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="当我们将原有ASP.NET 应用程序升级迁移到ASP.NET Core之后，我们发现代码工程中多了两个类Program类和Startup类。 接下来我们详细探秘一下通用主机Host的启动过程。 一、P" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>ASP.NET Core技术研究-探秘Host主机启动过程 - Eric zhou - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue.min.css?v=MH15aYd6DmX-6TABpA2xkiKENy3GAhiM2dh5rOPH89I" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/simpleblue/bundle-simpleblue-mobile.min.css?v=X7swQJ1TyCJAf6FMVjDPbYhUAiMdNFddEy1-m0_TbFQ" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/tianqing/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/tianqing/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/tianqing/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 27084;
        var currentBlogApp = 'tianqing';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'SimpleBlue';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    <div id="home">
    <div id="header">
        <div id="blogTitle">
            
<div class="title"><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/tianqing/">I love .net</a>
</div>
<div class="subtitle">

</div>

        </div>
        <div id="navigator">
            
<ul id="navList">
    <li id="nav_sitehome"><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
    <li id="nav_myhome">
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/tianqing/">
首页</a>
</li>
    <li id="nav_newpost">

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
    <li id="nav_contact">
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Eric%20zhou">
联系</a></li>
    <li id="nav_rss">
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/tianqing/rss/">
订阅</a></li>
    <li id="nav_admin">
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>

            <div class="blogStats">
                
<span id="stats_post_count">随笔 - 
101&nbsp;</span>
<span id="stats_article_count">文章 - 
0&nbsp;</span>
<!-- <span id="stats-comment_count"></span> -->
<span id="stats_comment_count">评论 - 
400</span>
            </div>
        </div>
    </div>
    <div id="main">
        <div id="mainContent">
            <div class="forFlow">
                <div id="post_detail">
    <div id="topics">
        <div class="post">
            <h1 class="postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/tianqing/p/12640739.html">ASP.NET Core技术研究-探秘Host主机启动过程</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>当我们将原有ASP.NET 应用程序升级迁移到ASP.NET Core之后，我们发现代码工程中多了两个类Program类和Startup类。</p>
<p>接下来我们详细探秘一下通用主机Host的启动过程。</p>
<p><span style="font-size: 18px;"><strong>一、Program类的Main函数入口</strong></span></p>
<p>Program类最重要的功能就是<strong>启动主机</strong>，这里有一个主机的概念，是ASP.NET Core全新引入的。</p>
<p><span data-ttu-id="1ee6b-105">主机负责应用程序启动和生存期管理。 同时，主机也是封装应用程序资源的对象：</span></p>
<ul>
<li><span data-ttu-id="3ab35-370">依赖注入 (DI)</span></li>
<li><span data-ttu-id="3ab35-371">Logging</span></li>
<li><span data-ttu-id="3ab35-372">Configuration</span></li>
<li><span data-ttu-id="3ab35-373">IHostedService&nbsp;实现</span></li>
</ul>
<p><span data-ttu-id="3ab35-373">启动主机时，它在 DI 容器中找到 IHostedService 的每个实现，然后调用 IHostedService.StartAsync。 在 web 应用中，其中一个 IHostedService 的实现是<strong>启动 HTTP 服务器实现的 web 服务</strong>。这里的HTTP服务器默认是Kestrel。</span></p>
<p><span data-ttu-id="3ab35-373">即：ASP.NET Core主机启动时，会启动一个HTTP服务器，默认是Kestrel。启动后监听并响应某个端口的HTTP请求。</span></p>
<p><span data-ttu-id="3ab35-373">我们继续看Program类的代码：&nbsp;</span></p>
<p><span data-ttu-id="3ab35-373">&nbsp;&nbsp;<img src="https://img2020.cnblogs.com/blog/23525/202004/23525-20200406092949389-1599548367.jpg" alt=""></span></p>
<p>&nbsp; &nbsp;从上述代码可以看到，Main函数中首先调用CreateHostBuilder方法，返回一个IHostBuilder。然后调用IHostBuilder.Build()方法完成</p>
<p><span style="font-size: 18px;"><strong>二、Host.CreateDefaultBuilder(args): 构造IHostBuilder的默认实现<span style="color: #0000ff;">HostBuilder</span></strong></span></p>
<p>&nbsp; &nbsp;在CreateHostBuilder方法内部，首先调用了Host.CreateDefaultBuilder构造了一个<span style="color: #0000ff;"><strong>HostBuilder</strong></span>，这个我们先看下源码，看看到底Host类内部做了什么操作：</p>
<p>&nbsp; &nbsp;<a href="https://github.com/dotnet/extensions/blob/release/3.1/src/Hosting/Hosting/src/Host.cs">https://github.com/dotnet/extensions/blob/release/3.1/src/Hosting/Hosting/src/Host.cs</a></p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">public static IHostBuilder CreateDefaultBuilder(string[] args)
        {
            var builder = new HostBuilder();

            builder.UseContentRoot(Directory.GetCurrentDirectory());
            builder.ConfigureHostConfiguration(config =&gt;
            {
                config.AddEnvironmentVariables(prefix: "DOTNET_");
                if (args != null)
                {
                    config.AddCommandLine(args);
                }
            });

            builder.ConfigureAppConfiguration((hostingContext, config) =&gt;
            {
                var env = hostingContext.HostingEnvironment;

                config.AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
                      .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true, reloadOnChange: true);

                if (env.IsDevelopment() &amp;&amp; !string.IsNullOrEmpty(env.ApplicationName))
                {
                    var appAssembly = Assembly.Load(new AssemblyName(env.ApplicationName));
                    if (appAssembly != null)
                    {
                        config.AddUserSecrets(appAssembly, optional: true);
                    }
                }

                config.AddEnvironmentVariables();

                if (args != null)
                {
                    config.AddCommandLine(args);
                }
            })
            .ConfigureLogging((hostingContext, logging) =&gt;
            {
                var isWindows = RuntimeInformation.IsOSPlatform(OSPlatform.Windows);

                // IMPORTANT: This needs to be added *before* configuration is loaded, this lets
                // the defaults be overridden by the configuration.
                if (isWindows)
                {
                    // Default the EventLogLoggerProvider to warning or above
                    logging.AddFilter&lt;EventLogLoggerProvider&gt;(level =&gt; level &gt;= LogLevel.Warning);
                }

                logging.AddConfiguration(hostingContext.Configuration.GetSection("Logging"));
                logging.AddConsole();
                logging.AddDebug();
                logging.AddEventSourceLogger();

                if (isWindows)
                {
                    // Add the EventLogLoggerProvider on windows machines
                    logging.AddEventLog();
                }
            })
            .UseDefaultServiceProvider((context, options) =&gt;
            {
                var isDevelopment = context.HostingEnvironment.IsDevelopment();
                options.ValidateScopes = isDevelopment;
                options.ValidateOnBuild = isDevelopment;
            });

            return builder;
        }
</pre>
</div>
<p>　 从上述代码中，可以看到CreateDefaultBuilder内部构造了一个HostBuilder，同时设置了：</p>
<ul>
<li>将内容根目录（contentRootPath）设置为由 GetCurrentDirectory 返回的路径。</li>
<li>通过以下源加载主机配置
<ul>
<li>环境变量（DOTNET_前缀）配置</li>
<li>命令行参数配置</li>
</ul>
</li>
<li>&nbsp; &nbsp; &nbsp;通过以下对象加载应用配置
<ul>
<li>appsettings.json&nbsp;</li>
<li>appsettings.{Environment}.json</li>
<li>密钥管理器 当应用在 Development 环境中运行时</li>
<li>环境变量</li>
<li>命令行参数</li>
</ul>
</li>
<li>&nbsp; &nbsp; &nbsp;添加日志记录提供程序</li>
</ul>
<ul>
<li style="list-style-type: none;">
<ul>
<li>控制台</li>
<li>调试</li>
<li>EventSource</li>
<li>EventLog（ Windows环境下）</li>
</ul>
</li>
</ul>
<ul>
<li>当环境为&ldquo;开发&rdquo;时，启用范围验证和依赖关系验证。</li>
</ul>
<p>&nbsp; &nbsp;以上构造完成了HostBuilder，针对ASP.NET Core应用，代码继续调用了<strong>HostBuilder.ConfigureWebHostDefaults</strong>方法。</p>
<p><span style="font-size: 18px;"><strong>三、IHostBuilder.ConfigureWebHostDefaults：<span style="color: #0000ff;"><strong>通过</strong><strong>GenericWebHostBuilder<strong>对<strong>HostBuilder</strong></strong>增加ASP.NET Core的运行时设置</strong></span></strong></span></p>
<p>&nbsp; &nbsp; 构造完成HostBuilder之后，针对ASP.NET Core应用，继续调用了<strong><span style="color: #0000ff;">HostBuilder.ConfigureWebHostDefaults</span></strong>方法。这是一个ASP.NET Core的一个扩展方法：</p>
<p>&nbsp; &nbsp;&nbsp;<img src="https://img2020.cnblogs.com/blog/23525/202004/23525-20200406110931669-1304044276.png" alt=""></p>
<p>&nbsp; &nbsp; &nbsp; 我们继续看ConfigureWebHostDefaults扩展方法内部做了哪些事情：</p>
<p>&nbsp; &nbsp; &nbsp; 源码连接：<a href="https://github.com/dotnet/aspnetcore/blob/master/src/DefaultBuilder/src/GenericHostBuilderExtensions.cs">https://github.com/dotnet/aspnetcore/blob/master/src/DefaultBuilder/src/GenericHostBuilderExtensions.cs</a>&nbsp; &nbsp; &nbsp;&nbsp;</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">using System;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore;

namespace Microsoft.Extensions.Hosting
{
    /// &lt;summary&gt;
    /// Extension methods for configuring the IWebHostBuilder.
    /// &lt;/summary&gt;
    public static class GenericHostBuilderExtensions
    {
        /// &lt;summary&gt;
        /// Initializes a new instance of the &lt;see cref="IWebHostBuilder"/&gt; class with pre-configured defaults.
        /// &lt;/summary&gt;
        /// &lt;remarks&gt;
        ///   The following defaults are applied to the &lt;see cref="IWebHostBuilder"/&gt;:
        ///     use Kestrel as the web server and configure it using the application's configuration providers,
        ///     adds the HostFiltering middleware,
        ///     adds the ForwardedHeaders middleware if ASPNETCORE_FORWARDEDHEADERS_ENABLED=true,
        ///     and enable IIS integration.
        /// &lt;/remarks&gt;
        /// &lt;param name="builder"&gt;The &lt;see cref="IHostBuilder" /&gt; instance to configure&lt;/param&gt;
        /// &lt;param name="configure"&gt;The configure callback&lt;/param&gt;
        /// &lt;returns&gt;The &lt;see cref="IHostBuilder"/&gt; for chaining.&lt;/returns&gt;
        public static IHostBuilder ConfigureWebHostDefaults(this IHostBuilder builder, Action&lt;IWebHostBuilder&gt; configure)
        {
            return builder.ConfigureWebHost(webHostBuilder =&gt;
            {
                WebHost.ConfigureWebDefaults(webHostBuilder);

                configure(webHostBuilder);
            });
        }
    }
}
&copy; 2020 GitHub, Inc.
</pre>
</div>
<p>　&nbsp;首先，通过类<strong>GenericHostWebHostBuilderExtensions</strong>，对IHostBuilder扩展一个方法：<span style="color: #0000ff;"><strong>ConfigureWebHost：<em>builder.ConfigureWebHost</em></strong></span></p>
<p><span style="color: #0000ff;"><strong>&nbsp; &nbsp; &nbsp;在这个扩展方法中实现了对IWebHostBuilder的依赖注入：即将GenericWebHostBuilder实例传入方法ConfigureWebHostDefaults内部</strong></span></p>
<p><span style="color: #0000ff;"><strong>&nbsp; &nbsp; &nbsp;</strong><span style="color: #000000;">代码连接：<a href="https://github.com/dotnet/aspnetcore/blob/release/3.1/src/Hosting/Hosting/src/GenericHostWebHostBuilderExtensions.cs"><span style="color: #000000;">https://github.com/dotnet/aspnetcore/blob/release/3.1/src/Hosting/Hosting/src/GenericHostWebHostBuilderExtensions.cs</span></a></span></span></p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;">using System;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;

namespace Microsoft.Extensions.Hosting
{
    public static class GenericHostWebHostBuilderExtensions
    {
        public static IHostBuilder ConfigureWebHost(this IHostBuilder builder, Action&lt;IWebHostBuilder&gt; configure)
        {
            var webhostBuilder = new GenericWebHostBuilder(builder);
            configure(webhostBuilder);
            builder.ConfigureServices((context, services) =&gt; services.AddHostedService&lt;GenericWebHostService&gt;());
            return builder;
        }
    }
}
</pre>
</div>
<p><strong>&nbsp; </strong>&nbsp;通过GenericWebHostBuilder的构造函数GenericWebHostBuilder（buillder），将已有的HostBuilder增加了ASP.NET Core运行时设置。</p>
<p>&nbsp; &nbsp;可以参考代码：<a href="https://github.com/dotnet/aspnetcore/blob/release/3.1/src/Hosting/Hosting/src/GenericHost/GenericWebHostBuilder.cs">https://github.com/dotnet/aspnetcore/blob/release/3.1/src/Hosting/Hosting/src/GenericHost/GenericWebHostBuilder.cs</a></p>
<p>&nbsp; <strong>&nbsp;。。。</strong></p>
<p><strong>&nbsp; &nbsp;先看到这，让我们回到ConfigureWebHostDefaults：</strong></p>
<p>&nbsp; &nbsp;将上面两段代码合并一下进行理解：ConfigureWebHostDefaults做了两件事情：</p>
<p>&nbsp; &nbsp;1. <strong>扩展IHostBuilder增加ConfigureWebHost</strong>，引入IWebHostBuilder的实现GenericWebHostBuilder，<strong>将已有的HostBuilder增加ASP.NET Core运行时的设置。</strong></p>
<p>&nbsp; &nbsp;2. <strong>ConfigureWebHost代码中的configure(webhostBuilder)：</strong>对注入的IWebHostBuilder，调用&nbsp;WebHost.ConfigureWebDefaults(webHostBuilder)，启用各类设置，如下代码解读：&nbsp;</p>
<div class="cnblogs_Highlighter">
<pre class="brush:csharp;gutter:true;"> internal static void ConfigureWebDefaults(IWebHostBuilder builder)
        {
            builder.ConfigureAppConfiguration((ctx, cb) =&gt;
            {
                if (ctx.HostingEnvironment.IsDevelopment())
                {
                    StaticWebAssetsLoader.UseStaticWebAssets(ctx.HostingEnvironment, ctx.Configuration);
                }
            });
            builder.UseKestrel((builderContext, options) =&gt;
            {
                options.Configure(builderContext.Configuration.GetSection("Kestrel"));
            })
            .ConfigureServices((hostingContext, services) =&gt;
            {
                // Fallback
                services.PostConfigure&lt;HostFilteringOptions&gt;(options =&gt;
                {
                    if (options.AllowedHosts == null || options.AllowedHosts.Count == 0)
                    {
                        // "AllowedHosts": "localhost;127.0.0.1;[::1]"
                        var hosts = hostingContext.Configuration["AllowedHosts"]?.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                        // Fall back to "*" to disable.
                        options.AllowedHosts = (hosts?.Length &gt; 0 ? hosts : new[] { "*" });
                    }
                });
                // Change notification
                services.AddSingleton&lt;IOptionsChangeTokenSource&lt;HostFilteringOptions&gt;&gt;(
                            new ConfigurationChangeTokenSource&lt;HostFilteringOptions&gt;(hostingContext.Configuration));

                services.AddTransient&lt;IStartupFilter, HostFilteringStartupFilter&gt;();

                if (string.Equals("true", hostingContext.Configuration["ForwardedHeaders_Enabled"], StringComparison.OrdinalIgnoreCase))
                {
                    services.Configure&lt;ForwardedHeadersOptions&gt;(options =&gt;
                    {
                        options.ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto;
                        // Only loopback proxies are allowed by default. Clear that restriction because forwarders are
                        // being enabled by explicit configuration.
                        options.KnownNetworks.Clear();
                        options.KnownProxies.Clear();
                    });

                    services.AddTransient&lt;IStartupFilter, ForwardedHeadersStartupFilter&gt;();
                }

                services.AddRouting();
            })
            .UseIIS()
            .UseIISIntegration();
        }</pre>
</div>
<p>&nbsp; &nbsp; &nbsp; 内部实现了：</p>
<ul>
<li>前缀为 ASPNETCORE_ 的环境变量加载主机配置。</li>
<li>将<a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-3.1" target="_blank">&nbsp;Kestrel作为默认的Web服务器</a></li>
<li>添加HostFiltering中间件（<a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/servers/kestrel?view=aspnetcore-3.1#host-filtering" target="_blank">主机筛选中间件</a>）</li>
<li>如果ASPNETCORE_FORWARDEDHEADERS_ENABLED=true，添加<a href="https://docs.microsoft.com/zh-cn/aspnet/core/host-and-deploy/proxy-load-balancer?view=aspnetcore-3.1#forwarded-headers" target="_blank">转接头中间件ForwardedHeaders</a>&nbsp;</li>
<li><a href="https://docs.microsoft.com/zh-cn/aspnet/core/host-and-deploy/iis/?view=aspnetcore-3.1#iis-options" target="_blank">启用IIS集成</a></li>
</ul>
<p>&nbsp;&nbsp;3. 返回<strong>ConfigureWebHostDefaults</strong>代码中的configure(webHostBuilder)：执行Program类中的<strong>webBuilder.UseStartup&lt;Startup&gt;();</strong></p>
<p><strong>&nbsp; 第三章节中，</strong>以上过程完成了IHostBuilder.ConfigureWebHostDefaults，通过GenericWebHostBuilder对HostBuilder增加ASP.NET Core的运行时设置。</p>
<p>&nbsp; 接下来继续Build和Run的过程。</p>
<p><span style="font-size: 18px;"><strong>四、CreateHostBuilder(args).Build().Run();</strong></span></p>
<p><span style="font-size: 18px;"><strong>&nbsp;</strong></span><strong>&nbsp;</strong>CreateHostBuilder返回的IHostBuilder，我们通过代码Debug，看一下具体的类型：<strong>Microsoft.Extensions.Hosting.HostBuilder，这样进一步验证了前三个章节的代码。</strong></p>
<p>&nbsp;&nbsp;<img src="https://img2020.cnblogs.com/blog/23525/202004/23525-20200406114155236-51029908.jpg" alt=""></p>
<p><strong>&nbsp; 1. Build的过程</strong></p>
<p>&nbsp; 先看下Build的源码：<a href="https://github.com/dotnet/extensions/blob/release/3.1/src/Hosting/Hosting/src/HostBuilder.cs">https://github.com/dotnet/extensions/blob/release/3.1/src/Hosting/Hosting/src/HostBuilder.cs</a></p>
<p>&nbsp;&nbsp;<img src="https://img2020.cnblogs.com/blog/23525/202004/23525-20200406115410820-795612178.jpg" alt=""></p>
<p>&nbsp; &nbsp; &nbsp; Build的过程主要完成了：</p>
<ul>
<li>BuildHostConfiguration： 构造配置系统，初始化&nbsp;<span class="pl-k"><span class="pl-en">IConfiguration <span class="pl-smi">_hostConfiguration;</span></span></span></li>
<li><span class="pl-k"><span class="pl-en"><span class="pl-smi">CreateHostingEnvironment：构建主机HostingEnvironment环境信息，包含<span class="pl-smi">ApplicationName、<span class="pl-smi">EnvironmentName、<span class="pl-smi">ContentRootPath等</span></span></span></span></span></span></li>
<li><span class="pl-k"><span class="pl-en"><span class="pl-smi"><span class="pl-smi"><span class="pl-smi"><span class="pl-smi">CreateHostBuilderContext：创建主机Build上下文HostBuilderContext，上下文中包含：<span class="pl-smi">HostingEnvironment和</span><span class="pl-smi">Configuration</span></span></span></span></span></span></span></li>
<li>BuildAppConfiguration：构建应用程序配置</li>
<li>CreateServiceProvider：创建依赖注入服务提供程序，&nbsp; 即依赖注入容器</li>
</ul>
<p><strong>&nbsp; 2. Run的过程</strong></p>
<p>&nbsp; &nbsp; &nbsp;我们先通过Debug，看一下Host的信息：Microsoft.Extensions.Hosting.Internal.Host</p>
<p>&nbsp; &nbsp; &nbsp;<img src="https://img2020.cnblogs.com/blog/23525/202004/23525-20200406120504252-1392265079.jpg" alt=""></p>
<p>&nbsp; &nbsp; &nbsp; 这个Run方法也是一个扩展方法：HostingAbstractionsHostExtensions.Run</p>
<p>&nbsp; &nbsp; &nbsp; 代码链接：<a href="https://github.com/dotnet/extensions/blob/release/3.1/src/Hosting/Abstractions/src/HostingAbstractionsHostExtensions.cs">https://github.com/dotnet/extensions/blob/release/3.1/src/Hosting/Abstractions/src/HostingAbstractionsHostExtensions.cs</a></p>
<p>&nbsp; &nbsp; &nbsp;&nbsp;<img src="https://img2020.cnblogs.com/blog/23525/202004/23525-20200406121440423-206729095.png" alt=""></p>
<p>&nbsp; &nbsp; &nbsp;其实内部转调的还是Host.StartAsync方法，在内部启动了DI依赖注入容器中所有注册的服务。</p>
<p>&nbsp; &nbsp; &nbsp;代码链接：<a href="https://github.com/dotnet/extensions/blob/release/3.1/src/Hosting/Hosting/src/Internal/Host.cs">https://github.com/dotnet/extensions/blob/release/3.1/src/Hosting/Hosting/src/Internal/Host.cs</a></p>
<p>&nbsp; &nbsp; &nbsp;<img src="https://img2020.cnblogs.com/blog/23525/202004/23525-20200406121636320-1320847789.jpg" alt=""></p>
<p>&nbsp; &nbsp;整个Host主机的启动过程还是非常复杂的，我们只是简单的在代码层面研究了一遍，感觉只是有了个大致的轮廓，具体怎么执行的，是不是如上面代码的解释，还需要深入继续研究。</p>
<p>&nbsp; &nbsp;接下来下一篇文章准备把源码单步调试看看。加深对ASP.NET Core底层技术原理的理解，只有理解了底层技术实现，我们在应用层才能更好、正确的使用。</p>
<p>&nbsp; &nbsp;</p>
<p>周国庆</p>
<p>2020/4/6</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2020-04-06 12:21</span>&nbsp;
<a href="https://www.cnblogs.com/tianqing/">Eric zhou</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=12640739" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(12640739);return false;">收藏</a></div>
        </div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 27084, cb_blogApp = 'tianqing', cb_blogUserGuid = 'ea753d0b-63cf-dd11-9e4d-001cf0cd104b';
    var cb_entryId = 12640739, cb_entryCreatedDate = '2020-04-06 12:21', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>    </div>
</div>
            </div>
        </div>

        <div id="sideBar">
            <div id="sideBarMain">
                
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

                <div id="calendar"><div id="blog-calendar" style="display:none"></div></div>                
                <script>loadBlogDefaultCalendar();</script>
                <div id="leftcontentcontainer">
                    <!-- begin:SingleColumn -->
                    <div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
                    <!-- end:  SingleColumn -->
                </div>
            </div>
        </div>
        <div class="clear"></div>
    </div>
    <div class="clear"></div>
    <div id="footer">
        <!--done-->
Copyright &copy; 2020 Eric zhou
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>

    </div>
</div>

    
</body>
</html>